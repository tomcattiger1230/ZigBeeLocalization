###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             06/Apr/2016  14:08:13 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  C:\Users\ArnoldWorkStation\Desktop\ZigbeeTest\Proj #
#                          ects\zstack\Samples\SampleApp\Source\algorithmandf #
#                          ilter.c                                            #
#    Command line       =  -f C:\Users\ArnoldWorkStation\Desktop\ZigbeeTest\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \Tools\CC2530DB\f8wEndev.cfg (-DCPU32MHZ           #
#                          -DROOT=__near_func -DBLINK_LEDS) -f                #
#                          C:\Users\ArnoldWorkStation\Desktop\ZigbeeTest\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\To #
#                          ols\CC2530DB\f8wConfig.cfg (-DSECURE=0             #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE      #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          C:\Users\ArnoldWorkStation\Desktop\ZigbeeTest\Proj #
#                          ects\zstack\Samples\SampleApp\Source\algorithmandf #
#                          ilter.c -D ZIGBEEPRO -D NWK_AUTO_POLL -D ZTOOL_P1  #
#                          -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D     #
#                          LCD_SUPPORTED=DEBUG -lC C:\Users\ArnoldWorkStation #
#                          \Desktop\ZigbeeTest\Projects\zstack\Samples\Sample #
#                          App\CC2530DB\QuadRotorOnboardPro\List\ -lA         #
#                          C:\Users\ArnoldWorkStation\Desktop\ZigbeeTest\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\QuadRotorOn #
#                          boardPro\List\ --diag_suppress Pe001,Pa010 -o      #
#                          C:\Users\ArnoldWorkStation\Desktop\ZigbeeTest\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\QuadRotorOn #
#                          boardPro\Obj\ -e --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I C:\Users\ArnoldWorkStation\Desktop\ZigbeeTest\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\ -I      #
#                          C:\Users\ArnoldWorkStation\Desktop\ZigbeeTest\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\SOURCE\  #
#                          -I C:\Users\ArnoldWorkStation\Desktop\ZigbeeTest\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \ZMAIN\TI2530DB\ -I C:\Users\ArnoldWorkStation\Des #
#                          ktop\ZigbeeTest\Projects\zstack\Samples\SampleApp\ #
#                          CC2530DB\..\..\..\..\..\COMPONENTS\MT\ -I          #
#                          C:\Users\ArnoldWorkStation\Desktop\ZigbeeTest\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\COMPONENTS\HAL\INCLUDE\ -I                     #
#                          C:\Users\ArnoldWorkStation\Desktop\ZigbeeTest\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\COMPONENTS\HAL\TARGET\CC2530EB\ -I             #
#                          C:\Users\ArnoldWorkStation\Desktop\ZigbeeTest\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\COMPONENTS\OSAL\MCU\CCSOC\ -I                  #
#                          C:\Users\ArnoldWorkStation\Desktop\ZigbeeTest\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\COMPONENTS\OSAL\INCLUDE\ -I                    #
#                          C:\Users\ArnoldWorkStation\Desktop\ZigbeeTest\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\COMPONENTS\STACK\AF\ -I                        #
#                          C:\Users\ArnoldWorkStation\Desktop\ZigbeeTest\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\COMPONENTS\STACK\NWK\ -I                       #
#                          C:\Users\ArnoldWorkStation\Desktop\ZigbeeTest\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\COMPONENTS\STACK\SEC\ -I                       #
#                          C:\Users\ArnoldWorkStation\Desktop\ZigbeeTest\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\COMPONENTS\STACK\SAPI\ -I                      #
#                          C:\Users\ArnoldWorkStation\Desktop\ZigbeeTest\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\COMPONENTS\STACK\SYS\ -I                       #
#                          C:\Users\ArnoldWorkStation\Desktop\ZigbeeTest\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\COMPONENTS\STACK\ZDO\ -I                       #
#                          C:\Users\ArnoldWorkStation\Desktop\ZigbeeTest\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\COMPONENTS\ZMAC\F8W\ -I                        #
#                          C:\Users\ArnoldWorkStation\Desktop\ZigbeeTest\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\COMPONENTS\ZMAC\ -I C:\Users\ArnoldWorkStation #
#                          \Desktop\ZigbeeTest\Projects\zstack\Samples\Sample #
#                          App\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SA #
#                          DDR\ -I C:\Users\ArnoldWorkStation\Desktop\ZigbeeT #
#                          est\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\SERVICES\SDATA\ -I          #
#                          C:\Users\ArnoldWorkStation\Desktop\ZigbeeTest\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\COMPONENTS\MAC\INCLUDE\ -I                     #
#                          C:\Users\ArnoldWorkStation\Desktop\ZigbeeTest\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\COMPONENTS\MAC\HIGH_LEVEL\ -I                  #
#                          C:\Users\ArnoldWorkStation\Desktop\ZigbeeTest\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I             #
#                          C:\Users\ArnoldWorkStation\Desktop\ZigbeeTest\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\    #
#                          -Ohz --require_prototypes                          #
#    List file          =  C:\Users\ArnoldWorkStation\Desktop\ZigbeeTest\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\QuadRotorOn #
#                          boardPro\List\algorithmandfilter.lst               #
#    Object file        =  C:\Users\ArnoldWorkStation\Desktop\ZigbeeTest\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\QuadRotorOn #
#                          boardPro\Obj\algorithmandfilter.r51                #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\ArnoldWorkStation\Desktop\ZigbeeTest\Projects\zstack\Samples\SampleApp\Source\algorithmandfilter.c
      1          /**************************************************************************************************
      2            Filename:       algorithmandfilter.c
      3            Revised:        $Date: 2016-01-09  $
      4            Revision:       $Revision: 1 $
      5          
      6            Description:    algorithmandfilter.
      7          
      8          
      9          **************************************************************************************************/
     10          
     11          /*********************************************************************
     12           * INCLUDES
     13           */
     14          #include "algorithmandfilter.h"
     15          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     16          void printRSSIandLQI(afIncomingMSGPacket_t *pkt, int specindex)
   \                     printRSSIandLQI:
     17          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
     18            
     19                   if(!specindex)
   \   00000A   75....       MOV     ?V0 + 4,#`?<Constant "\\n">` & 0xff
   \   00000D   75....       MOV     ?V0 + 5,#(`?<Constant "\\n">` >> 8) & 0xff
   \   000010   75....       MOV     ?V0 + 2,#`?<Constant "LQI:">` & 0xff
   \   000013   75....       MOV     ?V0 + 3,#(`?<Constant "LQI:">` >> 8) & 0xff
   \   000016   EA           MOV     A,R2
   \   000017   2416         ADD     A,#0x16
   \   000019   F5..         MOV     ?V0 + 0,A
   \   00001B   EB           MOV     A,R3
   \   00001C   3400         ADDC    A,#0x0
   \   00001E   F5..         MOV     ?V0 + 1,A
   \   000020   EA           MOV     A,R2
   \   000021   2421         ADD     A,#0x21
   \   000023   F8           MOV     R0,A
   \   000024   EB           MOV     A,R3
   \   000025   3400         ADDC    A,#0x0
   \   000027   F9           MOV     R1,A
   \   000028   88..         MOV     ?V0 + 6,R0
   \   00002A   89..         MOV     ?V0 + 7,R1
   \   00002C   EA           MOV     A,R2
   \   00002D   241F         ADD     A,#0x1f
   \   00002F   F8           MOV     R0,A
   \   000030   EB           MOV     A,R3
   \   000031   3400         ADDC    A,#0x0
   \   000033   F9           MOV     R1,A
   \   000034   88..         MOV     ?V0 + 8,R0
   \   000036   89..         MOV     ?V0 + 9,R1
   \   000038   EC           MOV     A,R4
   \   000039   4D           ORL     A,R5
   \   00003A   6003         JZ      $+5
   \   00003C   02....       LJMP    ??printRSSIandLQI_0 & 0xFFFF
     20                  { 
     21                    int8 rssivalue;
     22                  rssivalue=0xff-pkt->rssi;
   \   00003F   12....       LCALL   ?Subroutine3 & 0xFFFF
     23                  unsigned char rssi_buf[3];
     24                  rssi_buf[0]='-';
   \                     ??CrossCallReturnLabel_3:
   \   000042   85..82       MOV     DPL,?XSP + 0
   \   000045   85..83       MOV     DPH,?XSP + 1
   \   000048   12....       LCALL   ?Subroutine26 & 0xFFFF
     25                  rssi_buf[1]=rssivalue/10+0x30;
   \                     ??CrossCallReturnLabel_113:
   \   00004B   12....       LCALL   ?SC_DIV_MOD
   \   00004E   2430         ADD     A,#0x30
   \   000050   C0E0         PUSH    A
   \   000052   7401         MOV     A,#0x1
   \   000054   12....       LCALL   ?XSTACK_DISP0_8
   \   000057   D0E0         POP     A
   \   000059   12....       LCALL   ??Subroutine44_0 & 0xFFFF
     26                  rssi_buf[2]=rssivalue%10+0x30;
   \                     ??CrossCallReturnLabel_115:
   \   00005C   12....       LCALL   ?SC_DIV_MOD
   \   00005F   E5F0         MOV     A,B
   \   000061   2430         ADD     A,#0x30
   \   000063   C0E0         PUSH    A
   \   000065   7402         MOV     A,#0x2
   \   000067   12....       LCALL   ?XSTACK_DISP0_8
   \   00006A   D0E0         POP     A
   \   00006C   F0           MOVX    @DPTR,A
     27                   HalUARTWrite(0, pkt->cmd.Data, pkt->cmd.DataLength); //print out the data through uart
   \   00006D                ; Setup parameters for call to function HalUARTWrite
   \   00006D   85..82       MOV     DPL,?V0 + 8
   \   000070   8983         MOV     DPH,R1
   \   000072   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000075   12....       LCALL   ??HalUARTWrite?relay
     28                          
     29              //  HalUARTWrite(0, "\n", 1); 
     30                HalUARTWrite(0, "RSSI:", 5);  
   \   000078                ; Setup parameters for call to function HalUARTWrite
   \   000078   7C05         MOV     R4,#0x5
   \   00007A   7D00         MOV     R5,#0x0
   \   00007C   7A..         MOV     R2,#`?<Constant "RSSI:">` & 0xff
   \   00007E   7B..         MOV     R3,#(`?<Constant "RSSI:">` >> 8) & 0xff
   \   000080   7900         MOV     R1,#0x0
   \   000082   12....       LCALL   ??HalUARTWrite?relay
     31                HalUARTWrite(0,rssi_buf,3);
   \   000085                ; Setup parameters for call to function HalUARTWrite
   \   000085   7C03         MOV     R4,#0x3
   \   000087   7D00         MOV     R5,#0x0
   \   000089   85..82       MOV     DPL,?XSP + 0
   \   00008C   85..83       MOV     DPH,?XSP + 1
   \   00008F   AA82         MOV     R2,DPL
   \   000091   AB83         MOV     R3,DPH
   \   000093   7900         MOV     R1,#0x0
   \   000095   12....       LCALL   ??HalUARTWrite?relay
     32          //     HalUARTWrite(0, "\r\n", 2); 
     33          //     
     34               uint8 lqivalue;
     35               lqivalue=pkt->LinkQuality;
   \   000098   12....       LCALL   ?Subroutine19 & 0xFFFF
     36               unsigned char lqi_buf[3];
     37                lqi_buf[0]=lqivalue/100+0x30;
   \                     ??CrossCallReturnLabel_54:
   \   00009B   C0E0         PUSH    A
   \   00009D   7403         MOV     A,#0x3
   \   00009F   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A2   D0E0         POP     A
   \   0000A4   12....       LCALL   ?Subroutine21 & 0xFFFF
     38                  lqi_buf[1]=(lqivalue%100)/10+0x30;
   \                     ??CrossCallReturnLabel_58:
   \   0000A7   C0E0         PUSH    A
   \   0000A9   7404         MOV     A,#0x4
   \   0000AB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AE   D0E0         POP     A
   \   0000B0   12....       LCALL   ?Subroutine25 & 0xFFFF
     39                  lqi_buf[2]=lqivalue%10+0x30;
   \                     ??CrossCallReturnLabel_75:
   \   0000B3   C0E0         PUSH    A
   \   0000B5   7405         MOV     A,#0x5
   \   0000B7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BA   D0E0         POP     A
   \   0000BC   12....       LCALL   ?Subroutine23 & 0xFFFF
     40                HalUARTWrite(0, "LQI:", 4);  
   \                     ??CrossCallReturnLabel_71:
   \   0000BF   12....       LCALL   ??HalUARTWrite?relay
     41                HalUARTWrite(0,lqi_buf,3);
   \   0000C2                ; Setup parameters for call to function HalUARTWrite
   \   0000C2   7C03         MOV     R4,#0x3
   \   0000C4   7D00         MOV     R5,#0x0
   \   0000C6   EC           MOV     A,R4
   \   0000C7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CA   02....       LJMP    ??printRSSIandLQI_1 & 0xFFFF
     42               HalUARTWrite(0, "\n", 1);         //create a new line
     43                  }
     44                  else if (specindex==(int)*(pkt->cmd.Data+1)-48)
   \                     ??printRSSIandLQI_0:
   \   0000CD   85..82       MOV     DPL,?V0 + 6
   \   0000D0   85..83       MOV     DPH,?V0 + 7
   \   0000D3   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   0000D6   A3           INC     DPTR
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   24D0         ADD     A,#-0x30
   \   0000DA   F8           MOV     R0,A
   \   0000DB   E4           CLR     A
   \   0000DC   34FF         ADDC    A,#-0x1
   \   0000DE   F9           MOV     R1,A
   \   0000DF   E8           MOV     A,R0
   \   0000E0   6C           XRL     A,R4
   \   0000E1   7002         JNZ     ??printRSSIandLQI_2
   \   0000E3   E9           MOV     A,R1
   \   0000E4   6D           XRL     A,R5
   \                     ??printRSSIandLQI_2:
   \   0000E5   6003         JZ      $+5
   \   0000E7   02....       LJMP    ??printRSSIandLQI_3 & 0xFFFF
     45                  {
     46                              int8 rssivalue;
     47                  rssivalue=0xff-pkt->rssi;
   \   0000EA   12....       LCALL   ?Subroutine3 & 0xFFFF
     48                  unsigned char rssi_buf[3];
     49                  rssi_buf[0]='-';
   \                     ??CrossCallReturnLabel_4:
   \   0000ED   7403         MOV     A,#0x3
   \   0000EF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F2   12....       LCALL   ?Subroutine26 & 0xFFFF
     50                  rssi_buf[1]=rssivalue/10+0x30;
   \                     ??CrossCallReturnLabel_114:
   \   0000F5   12....       LCALL   ?SC_DIV_MOD
   \   0000F8   2430         ADD     A,#0x30
   \   0000FA   C0E0         PUSH    A
   \   0000FC   7404         MOV     A,#0x4
   \   0000FE   12....       LCALL   ?XSTACK_DISP0_8
   \   000101   D0E0         POP     A
   \   000103   12....       LCALL   ??Subroutine44_0 & 0xFFFF
     51                  rssi_buf[2]=rssivalue%10+0x30;
   \                     ??CrossCallReturnLabel_116:
   \   000106   12....       LCALL   ?SC_DIV_MOD
   \   000109   E5F0         MOV     A,B
   \   00010B   2430         ADD     A,#0x30
   \   00010D   C0E0         PUSH    A
   \   00010F   7405         MOV     A,#0x5
   \   000111   12....       LCALL   ?XSTACK_DISP0_8
   \   000114   D0E0         POP     A
   \   000116   F0           MOVX    @DPTR,A
     52                   HalUARTWrite(0, pkt->cmd.Data, pkt->cmd.DataLength); //print out the data through uart
   \   000117                ; Setup parameters for call to function HalUARTWrite
   \   000117   85..82       MOV     DPL,?V0 + 8
   \   00011A   85..83       MOV     DPH,?V0 + 9
   \   00011D   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000120   12....       LCALL   ??HalUARTWrite?relay
     53                          
     54              //  HalUARTWrite(0, "\n", 1); 
     55                HalUARTWrite(0, "RSSI:", 5);  
   \   000123                ; Setup parameters for call to function HalUARTWrite
   \   000123   7C05         MOV     R4,#0x5
   \   000125   7D00         MOV     R5,#0x0
   \   000127   7A..         MOV     R2,#`?<Constant "RSSI:">` & 0xff
   \   000129   7B..         MOV     R3,#(`?<Constant "RSSI:">` >> 8) & 0xff
   \   00012B   7900         MOV     R1,#0x0
   \   00012D   12....       LCALL   ??HalUARTWrite?relay
     56                HalUARTWrite(0,rssi_buf,3);
   \   000130                ; Setup parameters for call to function HalUARTWrite
   \   000130   7C03         MOV     R4,#0x3
   \   000132   7D00         MOV     R5,#0x0
   \   000134   EC           MOV     A,R4
   \   000135   12....       LCALL   ?XSTACK_DISP0_8
   \   000138   AA82         MOV     R2,DPL
   \   00013A   AB83         MOV     R3,DPH
   \   00013C   7900         MOV     R1,#0x0
   \   00013E   12....       LCALL   ??HalUARTWrite?relay
     57          //     HalUARTWrite(0, "\r\n", 2); 
     58          //     
     59               uint8 lqivalue;
     60               lqivalue=pkt->LinkQuality;
   \   000141   12....       LCALL   ?Subroutine19 & 0xFFFF
     61               unsigned char lqi_buf[3];
     62                lqi_buf[0]=lqivalue/100+0x30;
   \                     ??CrossCallReturnLabel_55:
   \   000144   85..82       MOV     DPL,?XSP + 0
   \   000147   85..83       MOV     DPH,?XSP + 1
   \   00014A   12....       LCALL   ?Subroutine21 & 0xFFFF
     63                  lqi_buf[1]=(lqivalue%100)/10+0x30;
   \                     ??CrossCallReturnLabel_59:
   \   00014D   C0E0         PUSH    A
   \   00014F   7401         MOV     A,#0x1
   \   000151   12....       LCALL   ?XSTACK_DISP0_8
   \   000154   D0E0         POP     A
   \   000156   12....       LCALL   ?Subroutine25 & 0xFFFF
     64                  lqi_buf[2]=lqivalue%10+0x30;
   \                     ??CrossCallReturnLabel_76:
   \   000159   C0E0         PUSH    A
   \   00015B   7402         MOV     A,#0x2
   \   00015D   12....       LCALL   ?XSTACK_DISP0_8
   \   000160   D0E0         POP     A
   \   000162   12....       LCALL   ?Subroutine23 & 0xFFFF
     65                HalUARTWrite(0, "LQI:", 4);  
   \                     ??CrossCallReturnLabel_72:
   \   000165   12....       LCALL   ??HalUARTWrite?relay
     66                HalUARTWrite(0,lqi_buf,3);
   \   000168                ; Setup parameters for call to function HalUARTWrite
   \   000168   7C03         MOV     R4,#0x3
   \   00016A   7D00         MOV     R5,#0x0
   \   00016C   85..82       MOV     DPL,?XSP + 0
   \   00016F   85..83       MOV     DPH,?XSP + 1
   \                     ??printRSSIandLQI_1:
   \   000172   AA82         MOV     R2,DPL
   \   000174   AB83         MOV     R3,DPH
   \   000176   7900         MOV     R1,#0x0
   \   000178   12....       LCALL   ??HalUARTWrite?relay
     67               HalUARTWrite(0, "\n", 1);         //create a new line
   \   00017B                ; Setup parameters for call to function HalUARTWrite
   \   00017B   7C01         MOV     R4,#0x1
   \   00017D   7D00         MOV     R5,#0x0
   \   00017F   AA..         MOV     R2,?V0 + 4
   \   000181   AB..         MOV     R3,?V0 + 5
   \   000183   7900         MOV     R1,#0x0
   \   000185   12....       LCALL   ??HalUARTWrite?relay
     68                  }
     69                
     70                                  
     71                            
     72          //                   unsigned char rssi_buf[3];
     73          //                     rssi_buf[0]='-';
     74          //                    rssi_buf[1]=(int32)sumRssi1/10+0x30;
     75          //                    rssi_buf[2]=(int32)sumRssi1%10+0x30;
     76          //                   HalUARTWrite(0,rssi_buf,3);
     77          }
   \                     ??printRSSIandLQI_3:
   \   000188   7406         MOV     A,#0x6
   \   00018A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00018D   7F0A         MOV     R7,#0xa
   \   00018F   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   742D         MOV     A,#0x2d
   \   000002                REQUIRE ??Subroutine44_0
   \   000002                ; // Fall through to label ??Subroutine44_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   E8           MOV     A,R0
   \   000002   75F00A       MOV     B,#0xa
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   E8           MOV     A,R0
   \   000002   75F00A       MOV     B,#0xa
   \   000005   84           DIV     AB
   \   000006   E5F0         MOV     A,B
   \   000008   2430         ADD     A,#0x30
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function HalUARTWrite
   \   000001                ; Setup parameters for call to function HalUARTWrite
   \   000001   7C04         MOV     R4,#0x4
   \   000003   7D00         MOV     R5,#0x0
   \   000005   AA..         MOV     R2,?V0 + 2
   \   000007   AB..         MOV     R3,?V0 + 3
   \   000009   7900         MOV     R1,#0x0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   E8           MOV     A,R0
   \   000002   75F064       MOV     B,#0x64
   \   000005   84           DIV     AB
   \   000006   E5F0         MOV     A,B
   \   000008   75F00A       MOV     B,#0xa
   \   00000B   84           DIV     AB
   \   00000C   2430         ADD     A,#0x30
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   85..82       MOV     DPL,?V0 + 0
   \   000003   85..83       MOV     DPH,?V0 + 1
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F8           MOV     R0,A
   \   000008   75F064       MOV     B,#0x64
   \   00000B   84           DIV     AB
   \   00000C   2430         ADD     A,#0x30
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   85..82       MOV     DPL,?V0 + 6
   \   000008   85..83       MOV     DPH,?V0 + 7
   \   00000B   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   00000E   7900         MOV     R1,#0x0
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   EA           MOV     A,R2
   \   000001   2418         ADD     A,#0x18
   \   000003   F582         MOV     DPL,A
   \   000005   EB           MOV     A,R3
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F8           MOV     R0,A
   \   00000C   74FF         MOV     A,#-0x1
   \   00000E   C3           CLR     C
   \   00000F   98           SUBB    A,R0
   \   000010   F8           MOV     R0,A
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET
     78          
     79          
     80          
     81          /*********************************************************************
     82           * @fn      SampleApp_MinMax_localization
     83           *
     84           * @brief   calculate the position of a quadrotor
     85           *
     86           * @param   rssi_i readings from different anchors, the result will be stored in xposition and yposition
     87           *
     88           * @return  none
     89           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     90          void SampleApp_MinMax_localization(float* xposition, float* yposition, float zposition, float nValue[4], float RssiValue[4],
   \                     SampleApp_MinMax_localization:
     91                                             float AValue[4], float AnchorX[4], float AnchorY[4], float OffsetA[4])
     92          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 38
   \   000005   74DA         MOV     A,#-0x26
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7414         MOV     A,#0x14
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   \   000014   7412         MOV     A,#0x12
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   EC           MOV     A,R4
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
   \   00001C   ED           MOV     A,R5
   \   00001D   F0           MOVX    @DPTR,A
     93              //initial the parameter 
     94              float x_left=-10;
   \   00001E   75..00       MOV     ?V0 + 0,#0x0
   \   000021   75..00       MOV     ?V0 + 1,#0x0
   \   000024   75..20       MOV     ?V0 + 2,#0x20
   \   000027   75..C1       MOV     ?V0 + 3,#-0x3f
     95              float x_right=10;
   \   00002A   740E         MOV     A,#0xe
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   12....       LCALL   ?Subroutine24 & 0xFFFF
     96              float y_bottom=-10;
   \                     ??CrossCallReturnLabel_73:
   \   000032   75..00       MOV     ?V0 + 4,#0x0
   \   000035   75..00       MOV     ?V0 + 5,#0x0
   \   000038   75..20       MOV     ?V0 + 6,#0x20
   \   00003B   75..C1       MOV     ?V0 + 7,#-0x3f
     97              float y_top=10;
   \   00003E   740A         MOV     A,#0xa
   \   000040   12....       LCALL   ?XSTACK_DISP0_8
   \   000043   12....       LCALL   ?Subroutine24 & 0xFFFF
     98              float gainconst=1.0f;
     99              //float naverage=0.0f;
    100              float distance[4]={0.0f};
   \                     ??CrossCallReturnLabel_74:
   \   000046   7416         MOV     A,#0x16
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   AC82         MOV     R4,DPL
   \   00004D   AD83         MOV     R5,DPH
   \   00004F   7583..       MOV     DPH,#(`?<Constant {(0.0F)}>` >> 8) & 0xff
   \   000052   7582..       MOV     DPL,#`?<Constant {(0.0F)}>` & 0xff
   \   000055   7410         MOV     A,#0x10
   \   000057   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    101          //    for(int i=0;i<4;i++)
    102          //    {
    103          //      naverage+=nValue[i];
    104          //    }
    105          //    naverage=naverage/4.0f;
    106              //calculate the distances based on the calibrated parameter n and A
    107              for (int i=0; i<4; i++)
   \   00005A   FE           MOV     R6,A
   \   00005B   FF           MOV     R7,A
   \   00005C   743E         MOV     A,#0x3e
   \   00005E   12....       LCALL   ?XSTACK_DISP0_8
   \   000061   12....       LCALL   ?XLOAD_R2345
   \   000064   743E         MOV     A,#0x3e
   \   000066   12....       LCALL   ?XSTACK_DISP0_8
   \   000069   12....       LCALL   ?XSTORE_R2345
   \   00006C   7442         MOV     A,#0x42
   \   00006E   12....       LCALL   ?XSTACK_DISP0_8
   \   000071   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000074   7442         MOV     A,#0x42
   \   000076   12....       LCALL   ?XSTACK_DISP0_8
   \   000079   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   00007C   7444         MOV     A,#0x44
   \   00007E   12....       LCALL   ?XSTACK_DISP0_8
   \   000081   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000084   7444         MOV     A,#0x44
   \   000086   12....       LCALL   ?XSTACK_DISP0_8
   \   000089   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   00008C   7446         MOV     A,#0x46
   \   00008E   12....       LCALL   ?XSTACK_DISP0_8
   \   000091   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000094   7446         MOV     A,#0x46
   \   000096   12....       LCALL   ?XSTACK_DISP0_8
   \   000099   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   00009C   744C         MOV     A,#0x4c
   \   00009E   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A1   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0000A4   744C         MOV     A,#0x4c
   \   0000A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A9   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   0000AC                ; Setup parameters for call to function pow
   \   0000AC   8E..         MOV     ?V0 + 8,R6
   \   0000AE   8F..         MOV     ?V0 + 9,R7
   \   0000B0   7402         MOV     A,#0x2
   \   0000B2   78..         MOV     R0,#?V0 + 8
   \   0000B4   12....       LCALL   ?S_SHL
   \   0000B7   7444         MOV     A,#0x44
   \   0000B9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BC   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0000BF   78..         MOV     R0,#?V0 + 8
   \   0000C1   12....       LCALL   ?L_MOV_X
   \   0000C4   90....       MOV     DPTR,#__Constant_3f800000
   \   0000C7   78..         MOV     R0,#?V0 + 12
   \   0000C9   12....       LCALL   ?L_MOV_X
   \   0000CC   78..         MOV     R0,#?V0 + 8
   \   0000CE   79..         MOV     R1,#?V0 + 12
   \   0000D0   12....       LCALL   ?FLT_DIV
   \   0000D3   8E..         MOV     ?V0 + 12,R6
   \   0000D5   8F..         MOV     ?V0 + 13,R7
   \   0000D7   7402         MOV     A,#0x2
   \   0000D9   78..         MOV     R0,#?V0 + 12
   \   0000DB   12....       LCALL   ?S_SHL
   \   0000DE   7446         MOV     A,#0x46
   \   0000E0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E3   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   0000E6   12....       LCALL   ?L_MOV_X
   \   0000E9   78..         MOV     R0,#?V0 + 8
   \   0000EB   79..         MOV     R1,#?V0 + 12
   \   0000ED   12....       LCALL   ?FLT_SUB
   \   0000F0   8E..         MOV     ?V0 + 12,R6
   \   0000F2   8F..         MOV     ?V0 + 13,R7
   \   0000F4   7402         MOV     A,#0x2
   \   0000F6   78..         MOV     R0,#?V0 + 12
   \   0000F8   12....       LCALL   ?S_SHL
   \   0000FB   744C         MOV     A,#0x4c
   \   0000FD   12....       LCALL   ?XSTACK_DISP0_8
   \   000100   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000103   12....       LCALL   ?L_MOV_X
   \   000106   78..         MOV     R0,#?V0 + 8
   \   000108   79..         MOV     R1,#?V0 + 12
   \   00010A   12....       LCALL   ?FLT_ADD
   \   00010D   C0..         PUSH    ?V0 + 8
   \   00010F   C0..         PUSH    ?V0 + 9
   \   000111   C0..         PUSH    ?V0 + 10
   \   000113   C0..         PUSH    ?V0 + 11
   \   000115   8E..         MOV     ?V0 + 8,R6
   \   000117   8F..         MOV     ?V0 + 9,R7
   \   000119   7402         MOV     A,#0x2
   \   00011B   78..         MOV     R0,#?V0 + 8
   \   00011D   12....       LCALL   ?S_SHL
   \   000120   7442         MOV     A,#0x42
   \   000122   12....       LCALL   ?XSTACK_DISP0_8
   \   000125   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000128   78..         MOV     R0,#?V0 + 12
   \   00012A   12....       LCALL   ?L_MOV_X
   \   00012D   90....       MOV     DPTR,#__Constant_41200000
   \   000130   78..         MOV     R0,#?V0 + 8
   \   000132   12....       LCALL   ?L_MOV_X
   \   000135   78..         MOV     R0,#?V0 + 12
   \   000137   79..         MOV     R1,#?V0 + 8
   \   000139   12....       LCALL   ?FLT_MUL
   \   00013C   D0..         POP     ?V0 + 11
   \   00013E   D0..         POP     ?V0 + 10
   \   000140   D0..         POP     ?V0 + 9
   \   000142   D0..         POP     ?V0 + 8
   \   000144   78..         MOV     R0,#?V0 + 8
   \   000146   79..         MOV     R1,#?V0 + 12
   \   000148   12....       LCALL   ?FLT_DIV
   \   00014B   78..         MOV     R0,#?V0 + 8
   \   00014D   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000150   90....       MOV     DPTR,#__Constant_41200000
   \   000153   12....       LCALL   ?XLOAD_R2345
    108              {
    109                distance[i]=pow(10,((RssiValue[i]/gainconst-AValue[i]+OffsetA[i])/(10*nValue[i])));
   \   000156   12....       LCALL   ??pow?relay
   \   000159   7404         MOV     A,#0x4
   \   00015B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00015E   8A..         MOV     ?V0 + 12,R2
   \   000160   8B..         MOV     ?V0 + 13,R3
   \   000162   8C..         MOV     ?V0 + 14,R4
   \   000164   8D..         MOV     ?V0 + 15,R5
   \   000166   8E..         MOV     ?V0 + 8,R6
   \   000168   8F..         MOV     ?V0 + 9,R7
   \   00016A   7402         MOV     A,#0x2
   \   00016C   78..         MOV     R0,#?V0 + 8
   \   00016E   12....       LCALL   ?S_SHL
   \   000171   7416         MOV     A,#0x16
   \   000173   12....       LCALL   ?XSTACK_DISP0_8
   \   000176   E582         MOV     A,DPL
   \   000178   25..         ADD     A,?V0 + 8
   \   00017A   F8           MOV     R0,A
   \   00017B   E583         MOV     A,DPH
   \   00017D   35..         ADDC    A,?V0 + 9
   \   00017F   F9           MOV     R1,A
   \   000180   7404         MOV     A,#0x4
   \   000182   12....       LCALL   ?XSTACK_DISP0_8
   \   000185   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000188   7404         MOV     A,#0x4
   \   00018A   12....       LCALL   ?XSTACK_DISP0_8
   \   00018D   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000190   78..         MOV     R0,#?V0 + 12
   \   000192   12....       LCALL   ?L_MOV_TO_X
    110                distance[i]=pow((distance[i]*distance[i]-zposition*zposition),0.5);
   \   000195                ; Setup parameters for call to function pow
   \   000195   90....       MOV     DPTR,#__Constant_3f000000
   \   000198   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00019B   8A..         MOV     ?V0 + 8,R2
   \   00019D   8B..         MOV     ?V0 + 9,R3
   \   00019F   8C..         MOV     ?V0 + 10,R4
   \   0001A1   8D..         MOV     ?V0 + 11,R5
   \   0001A3   78..         MOV     R0,#?V0 + 8
   \   0001A5   79..         MOV     R1,#?V0 + 12
   \   0001A7   12....       LCALL   ?FLT_MUL
   \   0001AA   C0..         PUSH    ?V0 + 8
   \   0001AC   C0..         PUSH    ?V0 + 9
   \   0001AE   C0..         PUSH    ?V0 + 10
   \   0001B0   C0..         PUSH    ?V0 + 11
   \   0001B2   7442         MOV     A,#0x42
   \   0001B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B7   78..         MOV     R0,#?V0 + 12
   \   0001B9   12....       LCALL   ?L_MOV_X
   \   0001BC   7442         MOV     A,#0x42
   \   0001BE   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C1   78..         MOV     R0,#?V0 + 8
   \   0001C3   12....       LCALL   ?L_MOV_X
   \   0001C6   78..         MOV     R0,#?V0 + 12
   \   0001C8   79..         MOV     R1,#?V0 + 8
   \   0001CA   12....       LCALL   ?FLT_MUL
   \   0001CD   D0..         POP     ?V0 + 11
   \   0001CF   D0..         POP     ?V0 + 10
   \   0001D1   D0..         POP     ?V0 + 9
   \   0001D3   D0..         POP     ?V0 + 8
   \   0001D5   78..         MOV     R0,#?V0 + 8
   \   0001D7   79..         MOV     R1,#?V0 + 12
   \   0001D9   12....       LCALL   ?FLT_SUB
   \   0001DC   AA..         MOV     R2,?V0 + 8
   \   0001DE   AB..         MOV     R3,?V0 + 9
   \   0001E0   AC..         MOV     R4,?V0 + 10
   \   0001E2   AD..         MOV     R5,?V0 + 11
   \   0001E4   12....       LCALL   ??pow?relay
   \   0001E7   7404         MOV     A,#0x4
   \   0001E9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001EC   7404         MOV     A,#0x4
   \   0001EE   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F1   12....       LCALL   ?Subroutine13 & 0xFFFF
    111              }
   \                     ??CrossCallReturnLabel_39:
   \   0001F4   12....       LCALL   ?XSTORE_R2345
   \   0001F7   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0001FA   5003         JNC     $+5
   \   0001FC   02....       LJMP    ??CrossCallReturnLabel_63 & 0xFFFF
    112              
    113              
    114              for(int i=0; i<4; i++)
   \   0001FF   7E00         MOV     R6,#0x0
   \   000201   7F00         MOV     R7,#0x0
   \   000203   7448         MOV     A,#0x48
   \   000205   12....       LCALL   ?XSTACK_DISP0_8
   \   000208   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   00020B   7448         MOV     A,#0x48
   \   00020D   12....       LCALL   ?XSTACK_DISP0_8
   \   000210   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000213   744A         MOV     A,#0x4a
   \   000215   12....       LCALL   ?XSTACK_DISP0_8
   \   000218   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   00021B   744A         MOV     A,#0x4a
   \   00021D   12....       LCALL   ?XSTACK_DISP0_8
   \   000220   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000223   8E..         MOV     ?V0 + 8,R6
   \   000225   8F..         MOV     ?V0 + 9,R7
   \   000227   7402         MOV     A,#0x2
   \   000229   78..         MOV     R0,#?V0 + 8
   \   00022B   12....       LCALL   ?S_SHL
   \   00022E   7416         MOV     A,#0x16
   \   000230   12....       LCALL   ?XSTACK_DISP0_8
   \   000233   E582         MOV     A,DPL
   \   000235   25..         ADD     A,?V0 + 8
   \   000237   F582         MOV     DPL,A
   \   000239   E583         MOV     A,DPH
   \   00023B   35..         ADDC    A,?V0 + 9
   \   00023D   F583         MOV     DPH,A
   \   00023F   12....       LCALL   ?XLOAD_R2345
   \   000242   7406         MOV     A,#0x6
   \   000244   12....       LCALL   ?XSTACK_DISP0_8
   \   000247   12....       LCALL   ?XSTORE_R2345
   \   00024A   8E..         MOV     ?V0 + 8,R6
   \   00024C   8F..         MOV     ?V0 + 9,R7
   \   00024E   7402         MOV     A,#0x2
   \   000250   78..         MOV     R0,#?V0 + 8
   \   000252   12....       LCALL   ?S_SHL
   \   000255   7448         MOV     A,#0x48
   \   000257   12....       LCALL   ?XSTACK_DISP0_8
   \   00025A   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00025D   12....       LCALL   ?XLOAD_R2345
   \   000260   85..82       MOV     DPL,?XSP + 0
   \   000263   85..83       MOV     DPH,?XSP + 1
   \   000266   12....       LCALL   ?XSTORE_R2345
   \   000269   85..82       MOV     DPL,?XSP + 0
   \   00026C   85..83       MOV     DPH,?XSP + 1
   \   00026F   78..         MOV     R0,#?V0 + 12
   \   000271   12....       LCALL   ?L_MOV_X
   \   000274   7406         MOV     A,#0x6
   \   000276   12....       LCALL   ?XSTACK_DISP0_8
   \   000279   78..         MOV     R0,#?V0 + 8
   \   00027B   12....       LCALL   ?L_MOV_X
   \   00027E   78..         MOV     R0,#?V0 + 12
   \   000280   79..         MOV     R1,#?V0 + 8
   \   000282   12....       LCALL   ?FLT_SUB
   \   000285   78..         MOV     R0,#?V0 + 0
   \   000287   79..         MOV     R1,#?V0 + 12
   \   000289   12....       LCALL   ?FLT_LT
   \   00028C   500C         JNC     ??SampleApp_MinMax_localization_0
    115              {
    116                
    117                  //max of  
    118                 if((AnchorX[i]-distance[i])>x_left)
    119                 {x_left=(AnchorX[i]-distance[i]);}
   \   00028E   85....       MOV     ?V0 + 0,?V0 + 12
   \   000291   85....       MOV     ?V0 + 1,?V0 + 13
   \   000294   85....       MOV     ?V0 + 2,?V0 + 14
   \   000297   85....       MOV     ?V0 + 3,?V0 + 15
    120                 
    121                 if((AnchorX[i]+distance[i])<x_right)
   \                     ??SampleApp_MinMax_localization_0:
   \   00029A   85..82       MOV     DPL,?XSP + 0
   \   00029D   85..83       MOV     DPH,?XSP + 1
   \   0002A0   78..         MOV     R0,#?V0 + 8
   \   0002A2   12....       LCALL   ?L_MOV_X
   \   0002A5   7406         MOV     A,#0x6
   \   0002A7   12....       LCALL   ?XSTACK_DISP0_8
   \   0002AA   78..         MOV     R0,#?V0 + 12
   \   0002AC   12....       LCALL   ?L_MOV_X
   \   0002AF   78..         MOV     R0,#?V0 + 8
   \   0002B1   79..         MOV     R1,#?V0 + 12
   \   0002B3   12....       LCALL   ?FLT_ADD
   \   0002B6   740E         MOV     A,#0xe
   \   0002B8   12....       LCALL   ?XSTACK_DISP0_8
   \   0002BB   78..         MOV     R0,#?V0 + 12
   \   0002BD   12....       LCALL   ?L_MOV_X
   \   0002C0   78..         MOV     R0,#?V0 + 8
   \   0002C2   79..         MOV     R1,#?V0 + 12
   \   0002C4   12....       LCALL   ?FLT_LT
   \   0002C7   500A         JNC     ??SampleApp_MinMax_localization_1
    122                 {x_right=(AnchorX[i]+distance[i]);}
   \   0002C9   740E         MOV     A,#0xe
   \   0002CB   12....       LCALL   ?XSTACK_DISP0_8
   \   0002CE   78..         MOV     R0,#?V0 + 8
   \   0002D0   12....       LCALL   ?L_MOV_TO_X
    123                 
    124                 if((AnchorY[i]-distance[i])>y_bottom)
   \                     ??SampleApp_MinMax_localization_1:
   \   0002D3   8E..         MOV     ?V0 + 8,R6
   \   0002D5   8F..         MOV     ?V0 + 9,R7
   \   0002D7   7402         MOV     A,#0x2
   \   0002D9   78..         MOV     R0,#?V0 + 8
   \   0002DB   12....       LCALL   ?S_SHL
   \   0002DE   744A         MOV     A,#0x4a
   \   0002E0   12....       LCALL   ?XSTACK_DISP0_8
   \   0002E3   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0002E6   12....       LCALL   ?XLOAD_R2345
   \   0002E9   85..82       MOV     DPL,?XSP + 0
   \   0002EC   85..83       MOV     DPH,?XSP + 1
   \   0002EF   12....       LCALL   ?XSTORE_R2345
   \   0002F2   85..82       MOV     DPL,?XSP + 0
   \   0002F5   85..83       MOV     DPH,?XSP + 1
   \   0002F8   78..         MOV     R0,#?V0 + 12
   \   0002FA   12....       LCALL   ?L_MOV_X
   \   0002FD   7406         MOV     A,#0x6
   \   0002FF   12....       LCALL   ?XSTACK_DISP0_8
   \   000302   78..         MOV     R0,#?V0 + 8
   \   000304   12....       LCALL   ?L_MOV_X
   \   000307   78..         MOV     R0,#?V0 + 12
   \   000309   79..         MOV     R1,#?V0 + 8
   \   00030B   12....       LCALL   ?FLT_SUB
   \   00030E   78..         MOV     R0,#?V0 + 4
   \   000310   79..         MOV     R1,#?V0 + 12
   \   000312   12....       LCALL   ?FLT_LT
   \   000315   500C         JNC     ??SampleApp_MinMax_localization_2
    125                 {y_bottom=(AnchorY[i]-distance[i]);}
   \   000317   85....       MOV     ?V0 + 4,?V0 + 12
   \   00031A   85....       MOV     ?V0 + 5,?V0 + 13
   \   00031D   85....       MOV     ?V0 + 6,?V0 + 14
   \   000320   85....       MOV     ?V0 + 7,?V0 + 15
    126                 
    127                 if((AnchorY[i]+distance[i])<y_top)
   \                     ??SampleApp_MinMax_localization_2:
   \   000323   85..82       MOV     DPL,?XSP + 0
   \   000326   85..83       MOV     DPH,?XSP + 1
   \   000329   78..         MOV     R0,#?V0 + 8
   \   00032B   12....       LCALL   ?L_MOV_X
   \   00032E   7406         MOV     A,#0x6
   \   000330   12....       LCALL   ?XSTACK_DISP0_8
   \   000333   78..         MOV     R0,#?V0 + 12
   \   000335   12....       LCALL   ?L_MOV_X
   \   000338   78..         MOV     R0,#?V0 + 8
   \   00033A   79..         MOV     R1,#?V0 + 12
   \   00033C   12....       LCALL   ?FLT_ADD
   \   00033F   740A         MOV     A,#0xa
   \   000341   12....       LCALL   ?XSTACK_DISP0_8
   \   000344   78..         MOV     R0,#?V0 + 12
   \   000346   12....       LCALL   ?L_MOV_X
   \   000349   78..         MOV     R0,#?V0 + 8
   \   00034B   79..         MOV     R1,#?V0 + 12
   \   00034D   12....       LCALL   ?FLT_LT
   \   000350   500A         JNC     ??SampleApp_MinMax_localization_3
    128                 {y_top=(AnchorY[i]+distance[i]);}
   \   000352   740A         MOV     A,#0xa
   \   000354   12....       LCALL   ?XSTACK_DISP0_8
   \   000357   78..         MOV     R0,#?V0 + 8
   \   000359   12....       LCALL   ?L_MOV_TO_X
    129              }
   \                     ??SampleApp_MinMax_localization_3:
   \   00035C   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00035F   5003         JNC     $+5
   \   000361   02....       LJMP    ??CrossCallReturnLabel_66 & 0xFFFF
    130              *xposition=(x_left+x_right)/2;
   \   000364   740E         MOV     A,#0xe
   \   000366   12....       LCALL   ?XSTACK_DISP0_8
   \   000369   78..         MOV     R0,#?V0 + 8
   \   00036B   12....       LCALL   ?L_MOV_X
   \   00036E   78..         MOV     R0,#?V0 + 0
   \   000370   79..         MOV     R1,#?V0 + 8
   \   000372   12....       LCALL   ?FLT_ADD
   \   000375   90....       MOV     DPTR,#__Constant_3f000000
   \   000378   78..         MOV     R0,#?V0 + 8
   \   00037A   12....       LCALL   ?L_MOV_X
   \   00037D   78..         MOV     R0,#?V0 + 0
   \   00037F   79..         MOV     R1,#?V0 + 8
   \   000381   12....       LCALL   ?FLT_MUL
   \   000384   7414         MOV     A,#0x14
   \   000386   12....       LCALL   ?XSTACK_DISP0_8
   \   000389   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   00038C   78..         MOV     R0,#?V0 + 0
   \   00038E   12....       LCALL   ?L_MOV_TO_X
    131              *yposition=(y_bottom+y_top)/2;
   \   000391   740A         MOV     A,#0xa
   \   000393   12....       LCALL   ?XSTACK_DISP0_8
   \   000396   78..         MOV     R0,#?V0 + 0
   \   000398   12....       LCALL   ?L_MOV_X
   \   00039B   78..         MOV     R0,#?V0 + 4
   \   00039D   79..         MOV     R1,#?V0 + 0
   \   00039F   12....       LCALL   ?FLT_ADD
   \   0003A2   90....       MOV     DPTR,#__Constant_3f000000
   \   0003A5   78..         MOV     R0,#?V0 + 0
   \   0003A7   12....       LCALL   ?L_MOV_X
   \   0003AA   78..         MOV     R0,#?V0 + 4
   \   0003AC   79..         MOV     R1,#?V0 + 0
   \   0003AE   12....       LCALL   ?FLT_MUL
   \   0003B1   7412         MOV     A,#0x12
   \   0003B3   12....       LCALL   ?XSTACK_DISP0_8
   \   0003B6   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   0003B9   78..         MOV     R0,#?V0 + 4
   \   0003BB   12....       LCALL   ?L_MOV_TO_X
    132              
    133          }
   \   0003BE   7426         MOV     A,#0x26
   \   0003C0   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   E4           CLR     A
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   7420         MOV     A,#0x20
   \   000007   F0           MOVX    @DPTR,A
   \   000008   A3           INC     DPTR
   \   000009   7441         MOV     A,#0x41
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   25..         ADD     A,?V0 + 12
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   35..         ADDC    A,?V0 + 13
   \   000008   8882         MOV     DPL,R0
   \   00000A   F583         MOV     DPH,A
   \   00000C   78..         MOV     R0,#?V0 + 12
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   25..         ADD     A,?V0 + 8
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   35..         ADDC    A,?V0 + 9
   \   000008   8882         MOV     DPL,R0
   \   00000A   F583         MOV     DPH,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000003   C3           CLR     C
   \   000004   EE           MOV     A,R6
   \   000005   9404         SUBB    A,#0x4
   \   000007   EF           MOV     A,R7
   \   000008   9400         SUBB    A,#0x0
   \   00000A   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00000C   65D0         XRL     A,PSW
   \   00000E   33           RLC     A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   EE           MOV     A,R6
   \   000001   2401         ADD     A,#0x1
   \   000003   0E           INC     R6
   \   000004   EF           MOV     A,R7
   \   000005   3400         ADDC    A,#0x0
   \   000007   FF           MOV     R7,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F10         MOV     R7,#0x10
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
    134          
    135          
    136          /*********************************************************************
    137           * @fn      SampleApp_WCL_localization
    138           *
    139           * @brief   calculate the position of a quadrotor
    140           *
    141           * @param   rssi_i readings from different anchors, the result will be stored in xposition and yposition
    142           *
    143           * @return  none
    144           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    145          void SampleApp_WCL_localization(float* xposition, float* yposition, float nValue[4], float RssiValue[4],
   \                     SampleApp_WCL_localization:
    146                                             float AValue[4], float AnchorX[4], float AnchorY[4], float OffsetA[4])
    147          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 44
   \   000005   74D4         MOV     A,#-0x2c
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   12....       LCALL   ?Subroutine20 & 0xFFFF
    148              //initial the parameter 
    149              float g=2.78;   // const. parameter for WCL  2.78
    150              float w[4]; //weight
    151              float sumw=0.0f; // sum of weights
   \                     ??CrossCallReturnLabel_56:
   \   000012   75..00       MOV     ?V0 + 0,#0x0
   \   000015   75..00       MOV     ?V0 + 1,#0x0
   \   000018   75..00       MOV     ?V0 + 2,#0x0
   \   00001B   75..00       MOV     ?V0 + 3,#0x0
    152              float naverage=0.0f;
                           ^
Warning[Pe177]: variable "naverage" was declared but never referenced
    153              float distance[4]={0.0f, 0.0f, 0.0f, 0.0f};
   \   00001E   741C         MOV     A,#0x1c
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   AC82         MOV     R4,DPL
   \   000025   AD83         MOV     R5,DPH
   \   000027   7583..       MOV     DPH,#(`?<Constant {(0.0F), (0.0F), (0.0F), (0.0F)}>` >> 8) & 0xff
   \   00002A   7582..       MOV     DPL,#`?<Constant {(0.0F), (0.0F), (0.0F), (0.0F)}>` & 0xff
   \   00002D   7410         MOV     A,#0x10
   \   00002F   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    154              float rssigain=1.0f;
    155              
    156                //average n from 4 nodes
    157          //    for(int i=0;i<4;i++)
    158          //    {
    159          //      naverage+=nValue[i];
    160          //    }
    161          //    
    162          //  
    163          //    naverage=naverage/4.0f;
    164              
    165              
    166              //calculate the distances based on the calibrated parameter n and A
    167              for (int i=0; i<4; i++)
   \   000032   FE           MOV     R6,A
   \   000033   FF           MOV     R7,A
   \   000034   7444         MOV     A,#0x44
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   00003C   7444         MOV     A,#0x44
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000044   7446         MOV     A,#0x46
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   00004C   7446         MOV     A,#0x46
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000054   7448         MOV     A,#0x48
   \   000056   12....       LCALL   ?XSTACK_DISP0_8
   \   000059   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   00005C   7448         MOV     A,#0x48
   \   00005E   12....       LCALL   ?XSTACK_DISP0_8
   \   000061   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000064   744E         MOV     A,#0x4e
   \   000066   12....       LCALL   ?XSTACK_DISP0_8
   \   000069   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   00006C   744E         MOV     A,#0x4e
   \   00006E   12....       LCALL   ?XSTACK_DISP0_8
   \   000071   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000074                ; Setup parameters for call to function pow
   \   000074   8E..         MOV     ?V0 + 4,R6
   \   000076   8F..         MOV     ?V0 + 5,R7
   \   000078   7402         MOV     A,#0x2
   \   00007A   78..         MOV     R0,#?V0 + 4
   \   00007C   12....       LCALL   ?S_SHL
   \   00007F   7446         MOV     A,#0x46
   \   000081   12....       LCALL   ?XSTACK_DISP0_8
   \   000084   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000087   78..         MOV     R0,#?V0 + 12
   \   000089   12....       LCALL   ?L_MOV_X
   \   00008C   90....       MOV     DPTR,#__Constant_3f800000
   \   00008F   78..         MOV     R0,#?V0 + 4
   \   000091   12....       LCALL   ?L_MOV_X
   \   000094   78..         MOV     R0,#?V0 + 12
   \   000096   79..         MOV     R1,#?V0 + 4
   \   000098   12....       LCALL   ?FLT_DIV
   \   00009B   8E..         MOV     ?V0 + 4,R6
   \   00009D   8F..         MOV     ?V0 + 5,R7
   \   00009F   7402         MOV     A,#0x2
   \   0000A1   78..         MOV     R0,#?V0 + 4
   \   0000A3   12....       LCALL   ?S_SHL
   \   0000A6   7448         MOV     A,#0x48
   \   0000A8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AB   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   0000AE   12....       LCALL   ?L_MOV_X
   \   0000B1   78..         MOV     R0,#?V0 + 12
   \   0000B3   79..         MOV     R1,#?V0 + 4
   \   0000B5   12....       LCALL   ?FLT_SUB
   \   0000B8   8E..         MOV     ?V0 + 4,R6
   \   0000BA   8F..         MOV     ?V0 + 5,R7
   \   0000BC   7402         MOV     A,#0x2
   \   0000BE   78..         MOV     R0,#?V0 + 4
   \   0000C0   12....       LCALL   ?S_SHL
   \   0000C3   744E         MOV     A,#0x4e
   \   0000C5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C8   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   0000CB   12....       LCALL   ?L_MOV_X
   \   0000CE   78..         MOV     R0,#?V0 + 12
   \   0000D0   79..         MOV     R1,#?V0 + 4
   \   0000D2   12....       LCALL   ?FLT_ADD
   \   0000D5   8E..         MOV     ?V0 + 4,R6
   \   0000D7   8F..         MOV     ?V0 + 5,R7
   \   0000D9   7402         MOV     A,#0x2
   \   0000DB   78..         MOV     R0,#?V0 + 4
   \   0000DD   12....       LCALL   ?S_SHL
   \   0000E0   7444         MOV     A,#0x44
   \   0000E2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E5   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   0000E8   78..         MOV     R0,#?V0 + 8
   \   0000EA   12....       LCALL   ?L_MOV_X
   \   0000ED   90....       MOV     DPTR,#__Constant_41200000
   \   0000F0   78..         MOV     R0,#?V0 + 4
   \   0000F2   12....       LCALL   ?L_MOV_X
   \   0000F5   78..         MOV     R0,#?V0 + 8
   \   0000F7   79..         MOV     R1,#?V0 + 4
   \   0000F9   12....       LCALL   ?FLT_MUL
   \   0000FC   78..         MOV     R0,#?V0 + 12
   \   0000FE   79..         MOV     R1,#?V0 + 8
   \   000100   12....       LCALL   ?FLT_DIV
   \   000103   78..         MOV     R0,#?V0 + 12
   \   000105   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000108   90....       MOV     DPTR,#__Constant_41200000
   \   00010B   12....       LCALL   ?XLOAD_R2345
    168              {
    169                distance[i]=pow(10,((RssiValue[i]/rssigain-AValue[i]+OffsetA[i])/(10*nValue[i])));
   \   00010E   12....       LCALL   ??pow?relay
   \   000111   7404         MOV     A,#0x4
   \   000113   12....       LCALL   ?DEALLOC_XSTACK8
   \   000116   8A..         MOV     ?V0 + 8,R2
   \   000118   8B..         MOV     ?V0 + 9,R3
   \   00011A   8C..         MOV     ?V0 + 10,R4
   \   00011C   8D..         MOV     ?V0 + 11,R5
   \   00011E   8E..         MOV     ?V0 + 4,R6
   \   000120   8F..         MOV     ?V0 + 5,R7
   \   000122   7402         MOV     A,#0x2
   \   000124   78..         MOV     R0,#?V0 + 4
   \   000126   12....       LCALL   ?S_SHL
   \   000129   741C         MOV     A,#0x1c
   \   00012B   12....       LCALL   ?XSTACK_DISP0_8
   \   00012E   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000131   12....       LCALL   ?L_MOV_TO_X
    170                w[i]=pow(distance[i],-g);
   \   000134                ; Setup parameters for call to function pow
   \   000134   90....       MOV     DPTR,#__Constant_c031eb85
   \   000137   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00013A   12....       LCALL   ??pow?relay
   \   00013D   7404         MOV     A,#0x4
   \   00013F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000142   8A..         MOV     ?V0 + 8,R2
   \   000144   8B..         MOV     ?V0 + 9,R3
   \   000146   8C..         MOV     ?V0 + 10,R4
   \   000148   8D..         MOV     ?V0 + 11,R5
   \   00014A   8E..         MOV     ?V0 + 4,R6
   \   00014C   8F..         MOV     ?V0 + 5,R7
   \   00014E   7402         MOV     A,#0x2
   \   000150   78..         MOV     R0,#?V0 + 4
   \   000152   12....       LCALL   ?S_SHL
   \   000155   740C         MOV     A,#0xc
   \   000157   12....       LCALL   ?XSTACK_DISP0_8
   \   00015A   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   00015D   12....       LCALL   ?L_MOV_TO_X
    171                sumw+=w[i];
   \   000160   78..         MOV     R0,#?V0 + 0
   \   000162   79..         MOV     R1,#?V0 + 8
   \   000164   12....       LCALL   ?FLT_ADD
    172              }
   \   000167   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00016A   5003         JNC     $+5
   \   00016C   02....       LJMP    ??CrossCallReturnLabel_70 & 0xFFFF
    173          
    174              
    175               
    176              *xposition=AnchorX[0]*w[0]/sumw+AnchorX[1]*w[1]/sumw+AnchorX[2]*w[2]/sumw+AnchorX[3]*w[3]/sumw;
   \   00016F   7418         MOV     A,#0x18
   \   000171   12....       LCALL   ?XSTACK_DISP0_8
   \   000174   12....       LCALL   ?XLOAD_R2345
   \   000177   7408         MOV     A,#0x8
   \   000179   12....       LCALL   ?XSTACK_DISP0_8
   \   00017C   12....       LCALL   ?XSTORE_R2345
   \   00017F   7414         MOV     A,#0x14
   \   000181   12....       LCALL   ?XSTACK_DISP0_8
   \   000184   12....       LCALL   ?XLOAD_R2345
   \   000187   7404         MOV     A,#0x4
   \   000189   12....       LCALL   ?XSTACK_DISP0_8
   \   00018C   12....       LCALL   ?XSTORE_R2345
   \   00018F   7410         MOV     A,#0x10
   \   000191   12....       LCALL   ?XSTACK_DISP0_8
   \   000194   78..         MOV     R0,#?V0 + 4
   \   000196   12....       LCALL   ?L_MOV_X
   \   000199   744A         MOV     A,#0x4a
   \   00019B   12....       LCALL   ?XSTACK_DISP0_8
   \   00019E   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   0001A1   12....       LCALL   ?L_MOV_X
   \   0001A4   740C         MOV     A,#0xc
   \   0001A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A9   78..         MOV     R0,#?V0 + 12
   \   0001AB   12....       LCALL   ?L_MOV_X
   \   0001AE   78..         MOV     R0,#?V0 + 8
   \   0001B0   79..         MOV     R1,#?V0 + 12
   \   0001B2   12....       LCALL   ?FLT_MUL
   \   0001B5   78..         MOV     R0,#?V0 + 8
   \   0001B7   79..         MOV     R1,#?V0 + 0
   \   0001B9   12....       LCALL   ?FLT_DIV
   \   0001BC   8A82         MOV     DPL,R2
   \   0001BE   8B83         MOV     DPH,R3
   \   0001C0   A3           INC     DPTR
   \   0001C1   A3           INC     DPTR
   \   0001C2   A3           INC     DPTR
   \   0001C3   A3           INC     DPTR
   \   0001C4   78..         MOV     R0,#?V0 + 12
   \   0001C6   12....       LCALL   ?L_MOV_X
   \   0001C9   78..         MOV     R0,#?V0 + 12
   \   0001CB   79..         MOV     R1,#?V0 + 4
   \   0001CD   12....       LCALL   ?FLT_MUL
   \   0001D0   78..         MOV     R0,#?V0 + 12
   \   0001D2   79..         MOV     R1,#?V0 + 0
   \   0001D4   12....       LCALL   ?FLT_DIV
   \   0001D7   78..         MOV     R0,#?V0 + 8
   \   0001D9   79..         MOV     R1,#?V0 + 12
   \   0001DB   12....       LCALL   ?FLT_ADD
   \   0001DE   C0..         PUSH    ?V0 + 8
   \   0001E0   C0..         PUSH    ?V0 + 9
   \   0001E2   C0..         PUSH    ?V0 + 10
   \   0001E4   C0..         PUSH    ?V0 + 11
   \   0001E6   8A82         MOV     DPL,R2
   \   0001E8   8B83         MOV     DPH,R3
   \   0001EA   A3           INC     DPTR
   \   0001EB   A3           INC     DPTR
   \   0001EC   A3           INC     DPTR
   \   0001ED   A3           INC     DPTR
   \   0001EE   A3           INC     DPTR
   \   0001EF   A3           INC     DPTR
   \   0001F0   A3           INC     DPTR
   \   0001F1   A3           INC     DPTR
   \   0001F2   78..         MOV     R0,#?V0 + 12
   \   0001F4   12....       LCALL   ?L_MOV_X
   \   0001F7   7404         MOV     A,#0x4
   \   0001F9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001FC   78..         MOV     R0,#?V0 + 8
   \   0001FE   12....       LCALL   ?L_MOV_X
   \   000201   78..         MOV     R0,#?V0 + 12
   \   000203   79..         MOV     R1,#?V0 + 8
   \   000205   12....       LCALL   ?FLT_MUL
   \   000208   78..         MOV     R0,#?V0 + 12
   \   00020A   79..         MOV     R1,#?V0 + 0
   \   00020C   12....       LCALL   ?FLT_DIV
   \   00020F   D0..         POP     ?V0 + 11
   \   000211   D0..         POP     ?V0 + 10
   \   000213   D0..         POP     ?V0 + 9
   \   000215   D0..         POP     ?V0 + 8
   \   000217   78..         MOV     R0,#?V0 + 8
   \   000219   79..         MOV     R1,#?V0 + 12
   \   00021B   12....       LCALL   ?FLT_ADD
   \   00021E   C0..         PUSH    ?V0 + 8
   \   000220   C0..         PUSH    ?V0 + 9
   \   000222   C0..         PUSH    ?V0 + 10
   \   000224   C0..         PUSH    ?V0 + 11
   \   000226   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000229   78..         MOV     R0,#?V0 + 12
   \   00022B   12....       LCALL   ?L_MOV_X
   \   00022E   7408         MOV     A,#0x8
   \   000230   12....       LCALL   ?XSTACK_DISP0_8
   \   000233   78..         MOV     R0,#?V0 + 8
   \   000235   12....       LCALL   ?L_MOV_X
   \   000238   78..         MOV     R0,#?V0 + 12
   \   00023A   79..         MOV     R1,#?V0 + 8
   \   00023C   12....       LCALL   ?FLT_MUL
   \   00023F   78..         MOV     R0,#?V0 + 12
   \   000241   79..         MOV     R1,#?V0 + 0
   \   000243   12....       LCALL   ?FLT_DIV
   \   000246   D0..         POP     ?V0 + 11
   \   000248   D0..         POP     ?V0 + 10
   \   00024A   D0..         POP     ?V0 + 9
   \   00024C   D0..         POP     ?V0 + 8
   \   00024E   78..         MOV     R0,#?V0 + 8
   \   000250   79..         MOV     R1,#?V0 + 12
   \   000252   12....       LCALL   ?FLT_ADD
   \   000255   7402         MOV     A,#0x2
   \   000257   12....       LCALL   ?XSTACK_DISP0_8
   \   00025A   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00025D   78..         MOV     R0,#?V0 + 8
   \   00025F   12....       LCALL   ?L_MOV_TO_X
   \   000262   744C         MOV     A,#0x4c
   \   000264   12....       LCALL   ?XSTACK_DISP0_8
   \   000267   12....       LCALL   ?Subroutine18 & 0xFFFF
    177              *yposition=AnchorY[0]*w[0]/sumw+AnchorY[1]*w[1]/sumw+AnchorY[2]*w[2]/sumw+AnchorY[3]*w[3]/sumw;
   \                     ??CrossCallReturnLabel_52:
   \   00026A   12....       LCALL   ?L_MOV_X
   \   00026D   740C         MOV     A,#0xc
   \   00026F   12....       LCALL   ?XSTACK_DISP0_8
   \   000272   78..         MOV     R0,#?V0 + 12
   \   000274   12....       LCALL   ?L_MOV_X
   \   000277   78..         MOV     R0,#?V0 + 8
   \   000279   79..         MOV     R1,#?V0 + 12
   \   00027B   12....       LCALL   ?FLT_MUL
   \   00027E   78..         MOV     R0,#?V0 + 8
   \   000280   79..         MOV     R1,#?V0 + 0
   \   000282   12....       LCALL   ?FLT_DIV
   \   000285   8A82         MOV     DPL,R2
   \   000287   8B83         MOV     DPH,R3
   \   000289   A3           INC     DPTR
   \   00028A   A3           INC     DPTR
   \   00028B   A3           INC     DPTR
   \   00028C   A3           INC     DPTR
   \   00028D   78..         MOV     R0,#?V0 + 12
   \   00028F   12....       LCALL   ?L_MOV_X
   \   000292   78..         MOV     R0,#?V0 + 12
   \   000294   79..         MOV     R1,#?V0 + 4
   \   000296   12....       LCALL   ?FLT_MUL
   \   000299   78..         MOV     R0,#?V0 + 12
   \   00029B   79..         MOV     R1,#?V0 + 0
   \   00029D   12....       LCALL   ?FLT_DIV
   \   0002A0   85....       MOV     ?V0 + 4,?V0 + 8
   \   0002A3   85....       MOV     ?V0 + 5,?V0 + 9
   \   0002A6   85....       MOV     ?V0 + 6,?V0 + 10
   \   0002A9   85....       MOV     ?V0 + 7,?V0 + 11
   \   0002AC   78..         MOV     R0,#?V0 + 4
   \   0002AE   79..         MOV     R1,#?V0 + 12
   \   0002B0   12....       LCALL   ?FLT_ADD
   \   0002B3   8A82         MOV     DPL,R2
   \   0002B5   8B83         MOV     DPH,R3
   \   0002B7   A3           INC     DPTR
   \   0002B8   A3           INC     DPTR
   \   0002B9   A3           INC     DPTR
   \   0002BA   A3           INC     DPTR
   \   0002BB   A3           INC     DPTR
   \   0002BC   A3           INC     DPTR
   \   0002BD   A3           INC     DPTR
   \   0002BE   A3           INC     DPTR
   \   0002BF   78..         MOV     R0,#?V0 + 12
   \   0002C1   12....       LCALL   ?L_MOV_X
   \   0002C4   7404         MOV     A,#0x4
   \   0002C6   12....       LCALL   ?XSTACK_DISP0_8
   \   0002C9   78..         MOV     R0,#?V0 + 8
   \   0002CB   12....       LCALL   ?L_MOV_X
   \   0002CE   78..         MOV     R0,#?V0 + 12
   \   0002D0   79..         MOV     R1,#?V0 + 8
   \   0002D2   12....       LCALL   ?FLT_MUL
   \   0002D5   78..         MOV     R0,#?V0 + 12
   \   0002D7   79..         MOV     R1,#?V0 + 0
   \   0002D9   12....       LCALL   ?FLT_DIV
   \   0002DC   78..         MOV     R0,#?V0 + 4
   \   0002DE   79..         MOV     R1,#?V0 + 12
   \   0002E0   12....       LCALL   ?FLT_ADD
   \   0002E3   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   0002E6   78..         MOV     R0,#?V0 + 8
   \   0002E8   12....       LCALL   ?L_MOV_X
   \   0002EB   7408         MOV     A,#0x8
   \   0002ED   12....       LCALL   ?XSTACK_DISP0_8
   \   0002F0   78..         MOV     R0,#?V0 + 12
   \   0002F2   12....       LCALL   ?L_MOV_X
   \   0002F5   78..         MOV     R0,#?V0 + 8
   \   0002F7   79..         MOV     R1,#?V0 + 12
   \   0002F9   12....       LCALL   ?FLT_MUL
   \   0002FC   78..         MOV     R0,#?V0 + 8
   \   0002FE   79..         MOV     R1,#?V0 + 0
   \   000300   12....       LCALL   ?FLT_DIV
   \   000303   78..         MOV     R0,#?V0 + 4
   \   000305   79..         MOV     R1,#?V0 + 8
   \   000307   12....       LCALL   ?FLT_ADD
   \   00030A   85..82       MOV     DPL,?XSP + 0
   \   00030D   85..83       MOV     DPH,?XSP + 1
   \   000310   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000313   78..         MOV     R0,#?V0 + 4
   \   000315   12....       LCALL   ?L_MOV_TO_X
    178              
    179          }
   \   000318   742C         MOV     A,#0x2c
   \   00031A   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   EA           MOV     A,R2
   \   000001   240C         ADD     A,#0xc
   \   000003   F582         MOV     DPL,A
   \   000005   EB           MOV     A,R3
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   E582         MOV     A,DPL
   \   000002   25..         ADD     A,?V0 + 4
   \   000004   F582         MOV     DPL,A
   \   000006   E583         MOV     A,DPH
   \   000008   35..         ADDC    A,?V0 + 5
   \   00000A   F583         MOV     DPH,A
   \   00000C   78..         MOV     R0,#?V0 + 8
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   78..         MOV     R0,#?V0 + 8
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   25..         ADD     A,?V0 + 4
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   35..         ADDC    A,?V0 + 5
   \   000008   8882         MOV     DPL,R0
   \   00000A   F583         MOV     DPH,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000003   78..         MOV     R0,#?V0 + 4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   85..82       MOV     DPL,?XSP + 0
   \   000008   85..83       MOV     DPH,?XSP + 1
   \   00000B   EC           MOV     A,R4
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   A3           INC     DPTR
   \   00000E   ED           MOV     A,R5
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   22           RET
    180          
    181          /*********************************************************************
    182           * @fn      moving_average
    183           *
    184           * @brief   filter for moving average
    185           *
    186           * @param   
    187           *
    188           * @return  none
    189           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    190          void moving_average(int8 in, int8 moavarray[], int length, int fil_cnt[2], float *out)
   \                     moving_average:
    191          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 0,R1
   \   000007   7414         MOV     A,#0x14
   \   000009   12....       LCALL   ?XSTACK_DISP0_8
   \   00000C   12....       LCALL   ?Subroutine7 & 0xFFFF
    192            if(++fil_cnt[0]>length)
   \                     ??CrossCallReturnLabel_13:
   \   00000F   FE           MOV     R6,A
   \   000010   E9           MOV     A,R1
   \   000011   3400         ADDC    A,#0x0
   \   000013   FF           MOV     R7,A
   \   000014   8E..         MOV     ?V0 + 2,R6
   \   000016   8F..         MOV     ?V0 + 3,R7
   \   000018   8882         MOV     DPL,R0
   \   00001A   8983         MOV     DPH,R1
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   FE           MOV     R6,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   FF           MOV     R7,A
   \   000021   C3           CLR     C
   \   000022   EC           MOV     A,R4
   \   000023   9E           SUBB    A,R6
   \   000024   ED           MOV     A,R5
   \   000025   9F           SUBB    A,R7
   \   000026   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000028   65D0         XRL     A,PSW
   \   00002A   33           RLC     A
   \   00002B   5014         JNC     ??moving_average_0
    193            {
    194              fil_cnt[0]=0;
   \   00002D   8882         MOV     DPL,R0
   \   00002F   8983         MOV     DPH,R1
   \   000031   E4           CLR     A
   \   000032   F0           MOVX    @DPTR,A
   \   000033   A3           INC     DPTR
   \   000034   F0           MOVX    @DPTR,A
    195              fil_cnt[1]=1;
   \   000035   85..82       MOV     DPL,?V0 + 2
   \   000038   85..83       MOV     DPH,?V0 + 3
   \   00003B   04           INC     A
   \   00003C   F0           MOVX    @DPTR,A
   \   00003D   A3           INC     DPTR
   \   00003E   E4           CLR     A
   \   00003F   801B         SJMP    ??moving_average_1
    196            }
    197            else  
    198            {
    199              fil_cnt[1]=(fil_cnt[0]==length)?0:(fil_cnt[0]+1);
   \                     ??moving_average_0:
   \   000041   EC           MOV     A,R4
   \   000042   6E           XRL     A,R6
   \   000043   7002         JNZ     ??moving_average_2
   \   000045   ED           MOV     A,R5
   \   000046   6F           XRL     A,R7
   \                     ??moving_average_2:
   \   000047   7006         JNZ     ??moving_average_3
   \   000049   7E00         MOV     R6,#0x0
   \   00004B   7F00         MOV     R7,#0x0
   \   00004D   8003         SJMP    ??CrossCallReturnLabel_110
   \                     ??moving_average_3:
   \   00004F   12....       LCALL   ?Subroutine41 & 0xFFFF
    200            }
   \                     ??CrossCallReturnLabel_110:
   \   000052   85..82       MOV     DPL,?V0 + 2
   \   000055   85..83       MOV     DPH,?V0 + 3
   \   000058   EE           MOV     A,R6
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   A3           INC     DPTR
   \   00005B   EF           MOV     A,R7
   \                     ??moving_average_1:
   \   00005C   F0           MOVX    @DPTR,A
    201            moavarray[fil_cnt[0]]=in;
   \   00005D   8882         MOV     DPL,R0
   \   00005F   8983         MOV     DPH,R1
   \   000061   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000064   EA           MOV     A,R2
   \   000065   28           ADD     A,R0
   \   000066   F582         MOV     DPL,A
   \   000068   EB           MOV     A,R3
   \   000069   39           ADDC    A,R1
   \   00006A   F583         MOV     DPH,A
   \   00006C   E5..         MOV     A,?V0 + 0
   \   00006E   F0           MOVX    @DPTR,A
   \   00006F   7416         MOV     A,#0x16
   \   000071   12....       LCALL   ?XSTACK_DISP0_8
   \   000074   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000077   E8           MOV     A,R0
   \   000078   FE           MOV     R6,A
   \   000079   E9           MOV     A,R1
   \   00007A   FF           MOV     R7,A
    202            *out+=(in-(moavarray[fil_cnt[1]]))/(float)(length);
   \   00007B   E5..         MOV     A,?V0 + 0
   \   00007D   F8           MOV     R0,A
   \   00007E   33           RLC     A
   \   00007F   95E0         SUBB    A,0xE0 /* A   */
   \   000081   F9           MOV     R1,A
   \   000082   85..82       MOV     DPL,?V0 + 2
   \   000085   85..83       MOV     DPH,?V0 + 3
   \   000088   E0           MOVX    A,@DPTR
   \   000089   F5..         MOV     ?V0 + 2,A
   \   00008B   A3           INC     DPTR
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   F5..         MOV     ?V0 + 3,A
   \   00008F   EA           MOV     A,R2
   \   000090   25..         ADD     A,?V0 + 2
   \   000092   F582         MOV     DPL,A
   \   000094   EB           MOV     A,R3
   \   000095   35..         ADDC    A,?V0 + 3
   \   000097   F583         MOV     DPH,A
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   FA           MOV     R2,A
   \   00009B   33           RLC     A
   \   00009C   95E0         SUBB    A,0xE0 /* A   */
   \   00009E   FB           MOV     R3,A
   \   00009F   E8           MOV     A,R0
   \   0000A0   C3           CLR     C
   \   0000A1   9A           SUBB    A,R2
   \   0000A2   F5..         MOV     ?V0 + 4,A
   \   0000A4   E9           MOV     A,R1
   \   0000A5   9B           SUBB    A,R3
   \   0000A6   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   0000A9   12....       LCALL   ?L_TO_FLT
   \   0000AC   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   0000AF   12....       LCALL   ?L_TO_FLT
   \   0000B2   78..         MOV     R0,#?V0 + 4
   \   0000B4   79..         MOV     R1,#?V0 + 8
   \   0000B6   12....       LCALL   ?FLT_DIV
   \   0000B9   8E82         MOV     DPL,R6
   \   0000BB   8F83         MOV     DPH,R7
   \   0000BD   78..         MOV     R0,#?V0 + 8
   \   0000BF   12....       LCALL   ?L_MOV_X
   \   0000C2   78..         MOV     R0,#?V0 + 4
   \   0000C4   79..         MOV     R1,#?V0 + 8
   \   0000C6   12....       LCALL   ?FLT_ADD
   \   0000C9   8E82         MOV     DPL,R6
   \   0000CB   8F83         MOV     DPH,R7
   \   0000CD   78..         MOV     R0,#?V0 + 4
   \   0000CF   12....       LCALL   ?L_MOV_TO_X
    203            
    204            
    205          }
   \   0000D2                REQUIRE ?Subroutine1
   \   0000D2                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F0C         MOV     R7,#0xc
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   8C..         MOV     ?V0 + 8,R4
   \   000002   ED           MOV     A,R5
   \   000003   F5..         MOV     ?V0 + 9,A
   \   000005   33           RLC     A
   \   000006   95E0         SUBB    A,0xE0 /* A   */
   \   000008   F5..         MOV     ?V0 + 10,A
   \   00000A   F5..         MOV     ?V0 + 11,A
   \   00000C   78..         MOV     R0,#?V0 + 8
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   8882         MOV     DPL,R0
   \   000007   8983         MOV     DPH,R1
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   2401         ADD     A,#0x1
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   A3           INC     DPTR
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   3400         ADDC    A,#0x0
   \   000011   F0           MOVX    @DPTR,A
   \   000012   E8           MOV     A,R0
   \   000013   2402         ADD     A,#0x2
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   F5..         MOV     ?V0 + 5,A
   \   000002   33           RLC     A
   \   000003   95E0         SUBB    A,0xE0 /* A   */
   \   000005   F5..         MOV     ?V0 + 6,A
   \   000007   F5..         MOV     ?V0 + 7,A
   \   000009   78..         MOV     R0,#?V0 + 4
   \   00000B   22           RET
    206          
    207          
    208          /*********************************************************************
    209           * @fn      moving_average
    210           *
    211           * @brief   filter for moving average
    212           *
    213           * @param   
    214           *
    215           * @return  none
    216           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    217          void moving_average_f(float in, float moavarray[], int length, int fil_cnt[2], float *out)
   \                     moving_average_f:
    218          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   8C..         MOV     ?V0 + 2,R4
   \   00000B   8D..         MOV     ?V0 + 3,R5
   \   00000D   7418         MOV     A,#0x18
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine7 & 0xFFFF
    219            if(++fil_cnt[0]>length)
   \                     ??CrossCallReturnLabel_14:
   \   000015   FA           MOV     R2,A
   \   000016   E9           MOV     A,R1
   \   000017   3400         ADDC    A,#0x0
   \   000019   FB           MOV     R3,A
   \   00001A   EA           MOV     A,R2
   \   00001B   FE           MOV     R6,A
   \   00001C   EB           MOV     A,R3
   \   00001D   FF           MOV     R7,A
   \   00001E   8882         MOV     DPL,R0
   \   000020   8983         MOV     DPH,R1
   \   000022   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000025   7416         MOV     A,#0x16
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   FC           MOV     R4,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   FD           MOV     R5,A
   \   00002F   C3           CLR     C
   \   000030   EC           MOV     A,R4
   \   000031   9A           SUBB    A,R2
   \   000032   ED           MOV     A,R5
   \   000033   9B           SUBB    A,R3
   \   000034   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000036   65D0         XRL     A,PSW
   \   000038   33           RLC     A
   \   000039   5012         JNC     ??moving_average_f_0
    220            {
    221              fil_cnt[0]=0;
   \   00003B   8882         MOV     DPL,R0
   \   00003D   8983         MOV     DPH,R1
   \   00003F   E4           CLR     A
   \   000040   F0           MOVX    @DPTR,A
   \   000041   A3           INC     DPTR
   \   000042   F0           MOVX    @DPTR,A
    222              fil_cnt[1]=1;
   \   000043   8E82         MOV     DPL,R6
   \   000045   8F83         MOV     DPH,R7
   \   000047   04           INC     A
   \   000048   F0           MOVX    @DPTR,A
   \   000049   A3           INC     DPTR
   \   00004A   E4           CLR     A
   \   00004B   8019         SJMP    ??moving_average_f_1
    223            }
    224            else  
    225            {
    226              fil_cnt[1]=(fil_cnt[0]==length)?0:(fil_cnt[0]+1);
   \                     ??moving_average_f_0:
   \   00004D   EC           MOV     A,R4
   \   00004E   6A           XRL     A,R2
   \   00004F   7002         JNZ     ??moving_average_f_2
   \   000051   ED           MOV     A,R5
   \   000052   6B           XRL     A,R3
   \                     ??moving_average_f_2:
   \   000053   7006         JNZ     ??moving_average_f_3
   \   000055   7A00         MOV     R2,#0x0
   \   000057   7B00         MOV     R3,#0x0
   \   000059   8003         SJMP    ??CrossCallReturnLabel_87
   \                     ??moving_average_f_3:
   \   00005B   12....       LCALL   ?Subroutine31 & 0xFFFF
    227            }
   \                     ??CrossCallReturnLabel_87:
   \   00005E   8E82         MOV     DPL,R6
   \   000060   8F83         MOV     DPH,R7
   \   000062   EA           MOV     A,R2
   \   000063   F0           MOVX    @DPTR,A
   \   000064   A3           INC     DPTR
   \   000065   EB           MOV     A,R3
   \                     ??moving_average_f_1:
   \   000066   F0           MOVX    @DPTR,A
   \   000067   7414         MOV     A,#0x14
   \   000069   12....       LCALL   ?XSTACK_DISP0_8
   \   00006C   12....       LCALL   ?Subroutine37 & 0xFFFF
    228            moavarray[fil_cnt[0]]=in;
   \                     ??CrossCallReturnLabel_101:
   \   00006F   8882         MOV     DPL,R0
   \   000071   8983         MOV     DPH,R1
   \   000073   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000076   12....       LCALL   ?S_SHL
   \   000079   EA           MOV     A,R2
   \   00007A   25..         ADD     A,?V0 + 4
   \   00007C   F582         MOV     DPL,A
   \   00007E   EB           MOV     A,R3
   \   00007F   35..         ADDC    A,?V0 + 5
   \   000081   F583         MOV     DPH,A
   \   000083   78..         MOV     R0,#?V0 + 0
   \   000085   12....       LCALL   ?L_MOV_TO_X
   \   000088   741A         MOV     A,#0x1a
   \   00008A   12....       LCALL   ?XSTACK_DISP0_8
   \   00008D   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000090   88..         MOV     ?V0 + 4,R0
   \   000092   89..         MOV     ?V0 + 5,R1
    229            *out+=(in-(moavarray[fil_cnt[1]]))/(float)(length);
   \   000094   8E82         MOV     DPL,R6
   \   000096   8F83         MOV     DPH,R7
   \   000098   E0           MOVX    A,@DPTR
   \   000099   F5..         MOV     ?V0 + 6,A
   \   00009B   A3           INC     DPTR
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   F5..         MOV     ?V0 + 7,A
   \   00009F   7402         MOV     A,#0x2
   \   0000A1   78..         MOV     R0,#?V0 + 6
   \   0000A3   12....       LCALL   ?S_SHL
   \   0000A6   EA           MOV     A,R2
   \   0000A7   25..         ADD     A,?V0 + 6
   \   0000A9   F582         MOV     DPL,A
   \   0000AB   EB           MOV     A,R3
   \   0000AC   35..         ADDC    A,?V0 + 7
   \   0000AE   F583         MOV     DPH,A
   \   0000B0   78..         MOV     R0,#?V0 + 8
   \   0000B2   12....       LCALL   ?L_MOV_X
   \   0000B5   78..         MOV     R0,#?V0 + 0
   \   0000B7   79..         MOV     R1,#?V0 + 8
   \   0000B9   12....       LCALL   ?FLT_SUB
   \   0000BC   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   0000BF   12....       LCALL   ?L_TO_FLT
   \   0000C2   78..         MOV     R0,#?V0 + 0
   \   0000C4   79..         MOV     R1,#?V0 + 8
   \   0000C6   12....       LCALL   ?FLT_DIV
   \   0000C9   85..82       MOV     DPL,?V0 + 4
   \   0000CC   85..83       MOV     DPH,?V0 + 5
   \   0000CF   78..         MOV     R0,#?V0 + 8
   \   0000D1   12....       LCALL   ?L_MOV_X
   \   0000D4   78..         MOV     R0,#?V0 + 0
   \   0000D6   79..         MOV     R1,#?V0 + 8
   \   0000D8   12....       LCALL   ?FLT_ADD
   \   0000DB   85..82       MOV     DPL,?V0 + 4
   \   0000DE   85..83       MOV     DPH,?V0 + 5
   \   0000E1   78..         MOV     R0,#?V0 + 0
   \   0000E3   12....       LCALL   ?L_MOV_TO_X
    230            
    231            
    232          }
   \   0000E6   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   EA           MOV     A,R2
   \   000001   2401         ADD     A,#0x1
   \   000003   0A           INC     R2
   \   000004   EB           MOV     A,R3
   \   000005   3400         ADDC    A,#0x0
   \   000007   FB           MOV     R3,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 4,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 5,A
   \   000007   7402         MOV     A,#0x2
   \   000009   78..         MOV     R0,#?V0 + 4
   \   00000B   22           RET
    233          
    234          
    235          
    236          /*********************************************************************
    237           * @fn      gaussianfilter
    238           *
    239           * @brief   filter for received rssi data
    240           *
    241           * @param   rssi rssi array, the result will be stored in xposition and yposition
    242           *
    243           * @return  none
    244           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    245          float gaussianfilter(int8* rssi, int length)
   \                     gaussianfilter:
    246          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   12....       LCALL   ?Subroutine20 & 0xFFFF
    247            float mu=0.0;
   \                     ??CrossCallReturnLabel_57:
   \   000012   75..00       MOV     ?V0 + 12,#0x0
   \   000015   75..00       MOV     ?V0 + 13,#0x0
   \   000018   75..00       MOV     ?V0 + 14,#0x0
   \   00001B   75..00       MOV     ?V0 + 15,#0x0
    248            float variance=0.0;
   \   00001E   7404         MOV     A,#0x4
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E4           CLR     A
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
   \   000026   F0           MOVX    @DPTR,A
   \   000027   A3           INC     DPTR
   \   000028   F0           MOVX    @DPTR,A
   \   000029   A3           INC     DPTR
   \   00002A   F0           MOVX    @DPTR,A
    249            float newmean=0.0;
   \   00002B   F5..         MOV     ?V0 + 4,A
   \   00002D   F5..         MOV     ?V0 + 5,A
   \   00002F   F5..         MOV     ?V0 + 6,A
   \   000031   F5..         MOV     ?V0 + 7,A
    250            
    251            for (int i=0; i<length; i++)
   \   000033   FA           MOV     R2,A
   \   000034   802B         SJMP    ??gaussianfilter_0
    252            {
    253              mu+=*(rssi+i);
   \                     ??gaussianfilter_1:
   \   000036   7402         MOV     A,#0x2
   \   000038   12....       LCALL   ?XSTACK_DISP0_8
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   2A           ADD     A,R2
   \   00003D   F8           MOV     R0,A
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   3B           ADDC    A,R3
   \   000041   12....       LCALL   ?Subroutine16 & 0xFFFF
    254            }
   \                     ??CrossCallReturnLabel_48:
   \   000044   12....       LCALL   ?L_TO_FLT
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   79..         MOV     R1,#?V0 + 12
   \   00004B   12....       LCALL   ?FLT_ADD
   \   00004E   85....       MOV     ?V0 + 12,?V0 + 0
   \   000051   85....       MOV     ?V0 + 13,?V0 + 1
   \   000054   85....       MOV     ?V0 + 14,?V0 + 2
   \   000057   85....       MOV     ?V0 + 15,?V0 + 3
   \   00005A   EA           MOV     A,R2
   \   00005B   2401         ADD     A,#0x1
   \   00005D   0A           INC     R2
   \   00005E   EB           MOV     A,R3
   \   00005F   3400         ADDC    A,#0x0
   \                     ??gaussianfilter_0:
   \   000061   FB           MOV     R3,A
   \   000062   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000065   40CF         JC      ??gaussianfilter_1
    255            mu=mu/length;
   \   000067   85..82       MOV     DPL,?XSP + 0
   \   00006A   85..83       MOV     DPH,?XSP + 1
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   F5..         MOV     ?V0 + 0,A
   \   000070   A3           INC     DPTR
   \   000071   E0           MOVX    A,@DPTR
   \   000072   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000075   12....       LCALL   ?L_TO_FLT
   \   000078   7408         MOV     A,#0x8
   \   00007A   12....       LCALL   ?XSTACK_DISP0_8
   \   00007D   78..         MOV     R0,#?V0 + 0
   \   00007F   12....       LCALL   ?L_MOV_TO_X
   \   000082   7408         MOV     A,#0x8
   \   000084   12....       LCALL   ?XSTACK_DISP0_8
   \   000087   78..         MOV     R0,#?V0 + 0
   \   000089   12....       LCALL   ?L_MOV_X
   \   00008C   78..         MOV     R0,#?V0 + 12
   \   00008E   79..         MOV     R1,#?V0 + 0
   \   000090   12....       LCALL   ?FLT_DIV
    256            
    257            for (int i=0; i<length; i++)
   \   000093   7A00         MOV     R2,#0x0
   \   000095   7B00         MOV     R3,#0x0
   \   000097   8064         SJMP    ??CrossCallReturnLabel_88
    258            {
    259              float temp=*(rssi+i);
    260              variance+=(float)pow((mu-temp),2);
   \                     ??gaussianfilter_2:
   \   000099   85....       MOV     ?V0 + 0,?V0 + 12
   \   00009C   85....       MOV     ?V0 + 1,?V0 + 13
   \   00009F   85....       MOV     ?V0 + 2,?V0 + 14
   \   0000A2   85....       MOV     ?V0 + 3,?V0 + 15
   \   0000A5   7402         MOV     A,#0x2
   \   0000A7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   2A           ADD     A,R2
   \   0000AC   F8           MOV     R0,A
   \   0000AD   A3           INC     DPTR
   \   0000AE   E0           MOVX    A,@DPTR
   \   0000AF   3B           ADDC    A,R3
   \   0000B0   8882         MOV     DPL,R0
   \   0000B2   F583         MOV     DPH,A
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   F5..         MOV     ?V0 + 8,A
   \   0000B7   33           RLC     A
   \   0000B8   95E0         SUBB    A,0xE0 /* A   */
   \   0000BA   F5..         MOV     ?V0 + 9,A
   \   0000BC   F5..         MOV     ?V0 + 10,A
   \   0000BE   F5..         MOV     ?V0 + 11,A
   \   0000C0   78..         MOV     R0,#?V0 + 8
   \   0000C2   12....       LCALL   ?L_TO_FLT
   \   0000C5   78..         MOV     R0,#?V0 + 0
   \   0000C7   79..         MOV     R1,#?V0 + 8
   \   0000C9   12....       LCALL   ?FLT_SUB
   \   0000CC   85....       MOV     ?V0 + 8,?V0 + 0
   \   0000CF   85....       MOV     ?V0 + 9,?V0 + 1
   \   0000D2   85....       MOV     ?V0 + 10,?V0 + 2
   \   0000D5   85....       MOV     ?V0 + 11,?V0 + 3
   \   0000D8   78..         MOV     R0,#?V0 + 0
   \   0000DA   79..         MOV     R1,#?V0 + 8
   \   0000DC   12....       LCALL   ?FLT_MUL
   \   0000DF   7404         MOV     A,#0x4
   \   0000E1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E4   78..         MOV     R0,#?V0 + 8
   \   0000E6   12....       LCALL   ?L_MOV_X
   \   0000E9   78..         MOV     R0,#?V0 + 0
   \   0000EB   79..         MOV     R1,#?V0 + 8
   \   0000ED   12....       LCALL   ?FLT_ADD
   \   0000F0   7404         MOV     A,#0x4
   \   0000F2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F5   78..         MOV     R0,#?V0 + 0
   \   0000F7   12....       LCALL   ?L_MOV_TO_X
    261            }
   \   0000FA   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   0000FD   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000100   4097         JC      ??gaussianfilter_2
    262            variance=(float)(variance/length);
   \   000102   7404         MOV     A,#0x4
   \   000104   12....       LCALL   ?XSTACK_DISP0_8
   \   000107   78..         MOV     R0,#?V0 + 0
   \   000109   12....       LCALL   ?L_MOV_X
   \   00010C   7408         MOV     A,#0x8
   \   00010E   12....       LCALL   ?XSTACK_DISP0_8
   \   000111   78..         MOV     R0,#?V0 + 8
   \   000113   12....       LCALL   ?L_MOV_X
   \   000116   78..         MOV     R0,#?V0 + 0
   \   000118   79..         MOV     R1,#?V0 + 8
   \   00011A   12....       LCALL   ?FLT_DIV
   \   00011D   7404         MOV     A,#0x4
   \   00011F   12....       LCALL   ?XSTACK_DISP0_8
   \   000122   78..         MOV     R0,#?V0 + 0
   \   000124   12....       LCALL   ?L_MOV_TO_X
    263            
    264            float intervalmin=mu-variance;
   \   000127   85....       MOV     ?V0 + 8,?V0 + 12
   \   00012A   85....       MOV     ?V0 + 9,?V0 + 13
   \   00012D   85....       MOV     ?V0 + 10,?V0 + 14
   \   000130   85....       MOV     ?V0 + 11,?V0 + 15
   \   000133   7404         MOV     A,#0x4
   \   000135   12....       LCALL   ?XSTACK_DISP0_8
   \   000138   78..         MOV     R0,#?V0 + 0
   \   00013A   12....       LCALL   ?L_MOV_X
   \   00013D   78..         MOV     R0,#?V0 + 8
   \   00013F   79..         MOV     R1,#?V0 + 0
   \   000141   12....       LCALL   ?FLT_SUB
    265            float intervalmax=mu+variance;
   \   000144   7404         MOV     A,#0x4
   \   000146   12....       LCALL   ?XSTACK_DISP0_8
   \   000149   78..         MOV     R0,#?V0 + 0
   \   00014B   12....       LCALL   ?L_MOV_X
   \   00014E   78..         MOV     R0,#?V0 + 12
   \   000150   79..         MOV     R1,#?V0 + 0
   \   000152   12....       LCALL   ?FLT_ADD
    266            
    267            int index=0;
   \   000155   7A00         MOV     R2,#0x0
   \   000157   7B00         MOV     R3,#0x0
    268            for (int i=0; i<length; i++)
   \   000159   7C00         MOV     R4,#0x0
   \   00015B   7D00         MOV     R5,#0x0
   \   00015D   8035         SJMP    ??gaussianfilter_3
    269            {
    270              float temp=*(rssi+i);
   \                     ??gaussianfilter_4:
   \   00015F   7402         MOV     A,#0x2
   \   000161   12....       LCALL   ?XSTACK_DISP0_8
   \   000164   E0           MOVX    A,@DPTR
   \   000165   2C           ADD     A,R4
   \   000166   F8           MOV     R0,A
   \   000167   A3           INC     DPTR
   \   000168   E0           MOVX    A,@DPTR
   \   000169   3D           ADDC    A,R5
   \   00016A   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   00016D   12....       LCALL   ?L_TO_FLT
    271              if(temp<=intervalmax&&temp>=intervalmin)
   \   000170   78..         MOV     R0,#?V0 + 12
   \   000172   79..         MOV     R1,#?V0 + 0
   \   000174   12....       LCALL   ?FLT_GE
   \   000177   5013         JNC     ??gaussianfilter_5
   \   000179   78..         MOV     R0,#?V0 + 0
   \   00017B   79..         MOV     R1,#?V0 + 8
   \   00017D   12....       LCALL   ?FLT_GE
   \   000180   500A         JNC     ??gaussianfilter_5
    272                 {
    273                   index++;
   \   000182   12....       LCALL   ?Subroutine31 & 0xFFFF
    274                   newmean+=temp;
   \                     ??CrossCallReturnLabel_89:
   \   000185   78..         MOV     R0,#?V0 + 4
   \   000187   79..         MOV     R1,#?V0 + 0
   \   000189   12....       LCALL   ?FLT_ADD
    275                 }
    276            }
   \                     ??gaussianfilter_5:
   \   00018C   EC           MOV     A,R4
   \   00018D   2401         ADD     A,#0x1
   \   00018F   0C           INC     R4
   \   000190   ED           MOV     A,R5
   \   000191   3400         ADDC    A,#0x0
   \   000193   FD           MOV     R5,A
   \                     ??gaussianfilter_3:
   \   000194   85..82       MOV     DPL,?XSP + 0
   \   000197   85..83       MOV     DPH,?XSP + 1
   \   00019A   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   00019D   C3           CLR     C
   \   00019E   EC           MOV     A,R4
   \   00019F   98           SUBB    A,R0
   \   0001A0   ED           MOV     A,R5
   \   0001A1   99           SUBB    A,R1
   \   0001A2   A2D2         MOV     C,0xD0 /* PSW */.2
   \   0001A4   65D0         XRL     A,PSW
   \   0001A6   33           RLC     A
   \   0001A7   40B6         JC      ??gaussianfilter_4
    277            
    278                 if(index!=0)
   \   0001A9   EA           MOV     A,R2
   \   0001AA   4B           ORL     A,R3
   \   0001AB   6010         JZ      ??gaussianfilter_6
    279                 {
    280                   newmean=newmean/index;
   \   0001AD   8A..         MOV     ?V0 + 0,R2
   \   0001AF   EB           MOV     A,R3
   \   0001B0   12....       LCALL   ?Subroutine36 & 0xFFFF
    281                 }
   \                     ??CrossCallReturnLabel_99:
   \   0001B3   12....       LCALL   ?L_TO_FLT
   \   0001B6   78..         MOV     R0,#?V0 + 4
   \   0001B8   79..         MOV     R1,#?V0 + 0
   \   0001BA   12....       LCALL   ?FLT_DIV
    282                 
    283            return newmean;
   \                     ??gaussianfilter_6:
   \   0001BD   AA..         MOV     R2,?V0 + 4
   \   0001BF   AB..         MOV     R3,?V0 + 5
   \   0001C1   AC..         MOV     R4,?V0 + 6
   \   0001C3   AD..         MOV     R5,?V0 + 7
   \   0001C5   740C         MOV     A,#0xc
   \   0001C7                REQUIRE ?Subroutine0
   \   0001C7                ; // Fall through to label ?Subroutine0
    284          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   F5..         MOV     ?V0 + 1,A
   \   000002   33           RLC     A
   \   000003   95E0         SUBB    A,0xE0 /* A   */
   \   000005   F5..         MOV     ?V0 + 2,A
   \   000007   F5..         MOV     ?V0 + 3,A
   \   000009   78..         MOV     R0,#?V0 + 0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   8882         MOV     DPL,R0
   \   000002   F583         MOV     DPH,A
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 0,A
   \   000007   33           RLC     A
   \   000008   95E0         SUBB    A,0xE0 /* A   */
   \   00000A   F5..         MOV     ?V0 + 1,A
   \   00000C   F5..         MOV     ?V0 + 2,A
   \   00000E   F5..         MOV     ?V0 + 3,A
   \   000010   78..         MOV     R0,#?V0 + 0
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F8           MOV     R0,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F9           MOV     R1,A
   \   00000B   C3           CLR     C
   \   00000C   EA           MOV     A,R2
   \   00000D   98           SUBB    A,R0
   \   00000E   EB           MOV     A,R3
   \   00000F   99           SUBB    A,R1
   \   000010   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000012   65D0         XRL     A,PSW
   \   000014   33           RLC     A
   \   000015   22           RET
    285          
    286          /*********************************************************************
    287           * @fn      averagefilter
    288           *
    289           * @brief   filter for received rssi data
    290           *
    291           * @param   rssi rssi array
    292           *
    293           * @return  none
    294           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    295          float averagefilter(int8* rssi, int length)
   \                     averagefilter:
    296          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
    297            int32 mu=0;
   \   000005   75..00       MOV     ?V0 + 0,#0x0
   \   000008   75..00       MOV     ?V0 + 1,#0x0
   \   00000B   75..00       MOV     ?V0 + 2,#0x0
   \   00000E   75..00       MOV     ?V0 + 3,#0x0
    298           
    299            float newmean=0.0;
    300            
    301            for(int i=0; i<length; i++)
   \   000011   7E00         MOV     R6,#0x0
   \   000013   7F00         MOV     R7,#0x0
   \   000015   801E         SJMP    ??CrossCallReturnLabel_111
    302             {
    303                            mu+=(int32)*(rssi+i);
   \                     ??averagefilter_0:
   \   000017   EA           MOV     A,R2
   \   000018   2E           ADD     A,R6
   \   000019   F582         MOV     DPL,A
   \   00001B   EB           MOV     A,R3
   \   00001C   3F           ADDC    A,R7
   \   00001D   F583         MOV     DPH,A
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V0 + 4,A
   \   000022   33           RLC     A
   \   000023   95E0         SUBB    A,0xE0 /* A   */
   \   000025   F5..         MOV     ?V0 + 5,A
   \   000027   F5..         MOV     ?V0 + 6,A
   \   000029   F5..         MOV     ?V0 + 7,A
   \   00002B   78..         MOV     R0,#?V0 + 0
   \   00002D   79..         MOV     R1,#?V0 + 4
   \   00002F   12....       LCALL   ?L_ADD
    304             }
   \   000032   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000035   C3           CLR     C
   \   000036   EE           MOV     A,R6
   \   000037   9C           SUBB    A,R4
   \   000038   EF           MOV     A,R7
   \   000039   9D           SUBB    A,R5
   \   00003A   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00003C   65D0         XRL     A,PSW
   \   00003E   33           RLC     A
   \   00003F   40D6         JC      ??averagefilter_0
    305                           newmean=((float)mu)/((float)length);
    306                       
    307                 
    308            return newmean;
   \   000041   78..         MOV     R0,#?V0 + 0
   \   000043   12....       LCALL   ?L_TO_FLT
   \   000046   8C..         MOV     ?V0 + 4,R4
   \   000048   ED           MOV     A,R5
   \   000049   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   00004C   12....       LCALL   ?L_TO_FLT
   \   00004F   78..         MOV     R0,#?V0 + 0
   \   000051   79..         MOV     R1,#?V0 + 4
   \   000053   12....       LCALL   ?FLT_DIV
   \   000056   AA..         MOV     R2,?V0 + 0
   \   000058   AB..         MOV     R3,?V0 + 1
   \   00005A   AC..         MOV     R4,?V0 + 2
   \   00005C   AD..         MOV     R5,?V0 + 3
   \   00005E   7F08         MOV     R7,#0x8
   \   000060   02....       LJMP    ?BANKED_LEAVE_XDATA
    309          }
    310          
    311          /*********************************************************************
    312           * @fn      calibrationN
    313           *
    314           * @brief   calibration of n
    315           *
    316           * @param   rssi rssi array
    317           *
    318           * @return  none
    319           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    320          float calibrationN(int localID, int index, float rssivalue_f[4], float nValue[4], 
   \                     calibrationN:
    321                             float AnchorX[4], float AnchorY[4], float AnchorZ[4], float A[4])
    322          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 22
   \   000005   74EA         MOV     A,#-0x16
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine27 & 0xFFFF
    323            float n;
    324            float offset=4.0f;
    325            float tempA[4]={48.0f, 48.0f, 55.0f, 56.0f} ;
   \                     ??CrossCallReturnLabel_77:
   \   00000D   7406         MOV     A,#0x6
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   AC82         MOV     R4,DPL
   \   000014   AD83         MOV     R5,DPH
   \   000016   7583..       MOV     DPH,#(`?<Constant {(48.0F), (48.0F), (55.0F), (56.0F)` >> 8) & 0xff
   \   000019   7582..       MOV     DPL,#`?<Constant {(48.0F), (48.0F), (55.0F), (56.0F)` & 0xff
   \   00001C   7410         MOV     A,#0x10
   \   00001E   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   \   000021   85..82       MOV     DPL,?XSP + 0
   \   000024   85..83       MOV     DPH,?XSP + 1
   \   000027   E0           MOVX    A,@DPTR
   \   000028   6E           XRL     A,R6
   \   000029   7003         JNZ     ??calibrationN_0
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   6F           XRL     A,R7
   \                     ??calibrationN_0:
   \   00002E   7003         JNZ     $+5
   \   000030   02....       LJMP    ??calibrationN_1 & 0xFFFF
   \   000033   7436         MOV     A,#0x36
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   00003B   12....       LCALL   ?S_SHL
   \   00003E   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000041   12....       LCALL   ?L_MOV_X
   \   000044   8E..         MOV     ?V0 + 4,R6
   \   000046   8F..         MOV     ?V0 + 5,R7
   \   000048   7402         MOV     A,#0x2
   \   00004A   78..         MOV     R0,#?V0 + 4
   \   00004C   12....       LCALL   ?S_SHL
   \   00004F   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000052   12....       LCALL   ?L_MOV_X
   \   000055   78..         MOV     R0,#?V0 + 0
   \   000057   79..         MOV     R1,#?V0 + 4
   \   000059   12....       LCALL   ?FLT_SUB
   \   00005C   7434         MOV     A,#0x34
   \   00005E   12....       LCALL   ?XSTACK_DISP0_8
   \   000061   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000064   12....       LCALL   ?S_SHL
   \   000067   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   00006A   12....       LCALL   ?L_MOV_X
   \   00006D   8E..         MOV     ?V0 + 8,R6
   \   00006F   8F..         MOV     ?V0 + 9,R7
   \   000071   7402         MOV     A,#0x2
   \   000073   78..         MOV     R0,#?V0 + 8
   \   000075   12....       LCALL   ?S_SHL
   \   000078   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   00007B   12....       LCALL   ?L_MOV_X
   \   00007E   78..         MOV     R0,#?V0 + 4
   \   000080   79..         MOV     R1,#?V0 + 8
   \   000082   12....       LCALL   ?FLT_SUB
   \   000085   7402         MOV     A,#0x2
   \   000087   12....       LCALL   ?XSTACK_DISP0_8
   \   00008A   78..         MOV     R0,#?V0 + 4
   \   00008C   12....       LCALL   ?L_MOV_TO_X
   \   00008F   7432         MOV     A,#0x32
   \   000091   12....       LCALL   ?XSTACK_DISP0_8
   \   000094   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000097   12....       LCALL   ?S_SHL
   \   00009A   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   00009D   12....       LCALL   ?L_MOV_X
   \   0000A0   8E..         MOV     ?V0 + 8,R6
   \   0000A2   8F..         MOV     ?V0 + 9,R7
   \   0000A4   7402         MOV     A,#0x2
   \   0000A6   78..         MOV     R0,#?V0 + 8
   \   0000A8   12....       LCALL   ?S_SHL
   \   0000AB   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   0000AE   12....       LCALL   ?L_MOV_X
   \   0000B1   78..         MOV     R0,#?V0 + 4
   \   0000B3   79..         MOV     R1,#?V0 + 8
   \   0000B5   12....       LCALL   ?FLT_SUB
   \   0000B8                ; Setup parameters for call to function pow
   \   0000B8   90....       MOV     DPTR,#__Constant_3f000000
   \   0000BB   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000BE   85....       MOV     ?V0 + 12,?V0 + 4
   \   0000C1   85....       MOV     ?V0 + 13,?V0 + 5
   \   0000C4   85....       MOV     ?V0 + 14,?V0 + 6
   \   0000C7   85....       MOV     ?V0 + 15,?V0 + 7
   \   0000CA   78..         MOV     R0,#?V0 + 12
   \   0000CC   79..         MOV     R1,#?V0 + 4
   \   0000CE   12....       LCALL   ?FLT_MUL
   \   0000D1   7406         MOV     A,#0x6
   \   0000D3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D6   78..         MOV     R0,#?V0 + 8
   \   0000D8   12....       LCALL   ?L_MOV_X
   \   0000DB   7406         MOV     A,#0x6
   \   0000DD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E0   78..         MOV     R0,#?V0 + 4
   \   0000E2   12....       LCALL   ?L_MOV_X
   \   0000E5   78..         MOV     R0,#?V0 + 8
   \   0000E7   79..         MOV     R1,#?V0 + 4
   \   0000E9   12....       LCALL   ?FLT_MUL
   \   0000EC   78..         MOV     R0,#?V0 + 12
   \   0000EE   79..         MOV     R1,#?V0 + 8
   \   0000F0   12....       LCALL   ?FLT_ADD
   \   0000F3   85....       MOV     ?V0 + 4,?V0 + 0
   \   0000F6   85....       MOV     ?V0 + 5,?V0 + 1
   \   0000F9   85....       MOV     ?V0 + 6,?V0 + 2
   \   0000FC   85....       MOV     ?V0 + 7,?V0 + 3
   \   0000FF   78..         MOV     R0,#?V0 + 4
   \   000101   79..         MOV     R1,#?V0 + 0
   \   000103   12....       LCALL   ?FLT_MUL
   \   000106   78..         MOV     R0,#?V0 + 12
   \   000108   79..         MOV     R1,#?V0 + 4
   \   00010A   12....       LCALL   ?FLT_ADD
   \   00010D   AA..         MOV     R2,?V0 + 12
   \   00010F   AB..         MOV     R3,?V0 + 13
   \   000111   AC..         MOV     R4,?V0 + 14
   \   000113   AD..         MOV     R5,?V0 + 15
    326            if(localID!=index)
    327            {
    328                
    329                float d=0.0f;
    330                d=(AnchorX[localID-1]-AnchorX[index-1])*(AnchorX[localID-1]-AnchorX[index-1])+
    331                  (AnchorY[localID-1]-AnchorY[index-1])*(AnchorY[localID-1]-AnchorY[index-1])+
    332                    (AnchorZ[localID-1]-AnchorZ[index-1])*(AnchorZ[localID-1]-AnchorZ[index-1]);
    333               // d+=pow((AnchorY[localID-1]-AnchorY[index-1]),2);
    334               // d+=pow((AnchorZ[localID-1]-AnchorZ[index-1]),2);
    335                d=pow(d,0.5);   // distance between two anchors 
   \   000115   12....       LCALL   ??pow?relay
   \   000118   7404         MOV     A,#0x4
   \   00011A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00011D   8A..         MOV     ?V0 + 0,R2
   \   00011F   8B..         MOV     ?V0 + 1,R3
   \   000121   8C..         MOV     ?V0 + 2,R4
   \   000123   8D..         MOV     ?V0 + 3,R5
    336               
    337                if(d!=1)
   \   000125   90....       MOV     DPTR,#__Constant_3f800000
   \   000128   78..         MOV     R0,#?V0 + 4
   \   00012A   12....       LCALL   ?L_MOV_X
   \   00012D   78..         MOV     R0,#?V0 + 0
   \   00012F   79..         MOV     R1,#?V0 + 4
   \   000131   12....       LCALL   ?FLT_EQ
   \   000134   606C         JZ      ??calibrationN_1
    338                //  n=(rssivalue_f[index-1]-A[index-1]+offset)/10.0f/(log10(d));
    339                   n=(rssivalue_f[index-1]-tempA[index-1]+offset)/10.0f/(log10(d));
   \   000136   8E..         MOV     ?V0 + 4,R6
   \   000138   8F..         MOV     ?V0 + 5,R7
   \   00013A   7402         MOV     A,#0x2
   \   00013C   78..         MOV     R0,#?V0 + 4
   \   00013E   12....       LCALL   ?S_SHL
   \   000141   742E         MOV     A,#0x2e
   \   000143   12....       LCALL   ?XSTACK_DISP0_8
   \   000146   12....       LCALL   ?Subroutine8 & 0xFFFF
    340                else
    341                  n=nValue[localID-1];
    342            }
   \                     ??CrossCallReturnLabel_15:
   \   000149   12....       LCALL   ?L_MOV_X
   \   00014C   8E..         MOV     ?V0 + 8,R6
   \   00014E   8F..         MOV     ?V0 + 9,R7
   \   000150   7402         MOV     A,#0x2
   \   000152   78..         MOV     R0,#?V0 + 8
   \   000154   12....       LCALL   ?S_SHL
   \   000157   7406         MOV     A,#0x6
   \   000159   12....       LCALL   ?XSTACK_DISP0_8
   \   00015C   E582         MOV     A,DPL
   \   00015E   25..         ADD     A,?V0 + 8
   \   000160   F8           MOV     R0,A
   \   000161   E583         MOV     A,DPH
   \   000163   12....       LCALL   ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000166   12....       LCALL   ?L_MOV_X
   \   000169   78..         MOV     R0,#?V0 + 4
   \   00016B   79..         MOV     R1,#?V0 + 8
   \   00016D   12....       LCALL   ?FLT_SUB
   \   000170   90....       MOV     DPTR,#__Constant_40800000
   \   000173   78..         MOV     R0,#?V0 + 8
   \   000175   12....       LCALL   ?L_MOV_X
   \   000178   78..         MOV     R0,#?V0 + 4
   \   00017A   79..         MOV     R1,#?V0 + 8
   \   00017C   12....       LCALL   ?FLT_ADD
   \   00017F   90....       MOV     DPTR,#__Constant_41200000
   \   000182   78..         MOV     R0,#?V0 + 8
   \   000184   12....       LCALL   ?L_MOV_X
   \   000187   78..         MOV     R0,#?V0 + 4
   \   000189   79..         MOV     R1,#?V0 + 8
   \   00018B   12....       LCALL   ?FLT_DIV
   \   00018E                ; Setup parameters for call to function log10
   \   00018E   12....       LCALL   ??log10?relay
   \   000191   8A..         MOV     ?V0 + 0,R2
   \   000193   8B..         MOV     ?V0 + 1,R3
   \   000195   8C..         MOV     ?V0 + 2,R4
   \   000197   8D..         MOV     ?V0 + 3,R5
   \   000199   78..         MOV     R0,#?V0 + 4
   \   00019B   79..         MOV     R1,#?V0 + 0
   \   00019D   12....       LCALL   ?FLT_DIV
   \   0001A0   8011         SJMP    ??calibrationN_2
    343            else
    344            {
    345              n=nValue[localID-1];
   \                     ??calibrationN_1:
   \   0001A2   12....       LCALL   ??Subroutine47_0 & 0xFFFF
    346            }
   \                     ??CrossCallReturnLabel_130:
   \   0001A5   12....       LCALL   ?S_SHL
   \   0001A8   7430         MOV     A,#0x30
   \   0001AA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AD   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   0001B0   12....       LCALL   ?L_MOV_X
    347            return n;
   \                     ??calibrationN_2:
   \   0001B3   AA..         MOV     R2,?V0 + 4
   \   0001B5   AB..         MOV     R3,?V0 + 5
   \   0001B7   AC..         MOV     R4,?V0 + 6
   \   0001B9   AD..         MOV     R5,?V0 + 7
   \   0001BB   7416         MOV     A,#0x16
   \   0001BD   02....       LJMP    ?Subroutine0 & 0xFFFF
    348          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   EA           MOV     A,R2
   \   000001   25..         ADD     A,?V0 + 0
   \   000003   F8           MOV     R0,A
   \   000004   EB           MOV     A,R3
   \   000005   35..         ADDC    A,?V0 + 1
   \   000007   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   00000A   78..         MOV     R0,#?V0 + 0
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   EA           MOV     A,R2
   \   000001   25..         ADD     A,?V0 + 8
   \   000003   F8           MOV     R0,A
   \   000004   EB           MOV     A,R3
   \   000005                REQUIRE ??Subroutine45_0
   \   000005                ; // Fall through to label ??Subroutine45_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   35..         ADDC    A,?V0 + 9
   \   000002   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000005   78..         MOV     R0,#?V0 + 8
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   F9           MOV     R1,A
   \   000001   E8           MOV     A,R0
   \   000002   24FC         ADD     A,#-0x4
   \   000004   F582         MOV     DPL,A
   \   000006   E9           MOV     A,R1
   \   000007   34FF         ADDC    A,#-0x1
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   EA           MOV     A,R2
   \   000001   25..         ADD     A,?V0 + 4
   \   000003   F8           MOV     R0,A
   \   000004   EB           MOV     A,R3
   \   000005   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   EA           MOV     A,R2
   \   000007   F0           MOVX    @DPTR,A
   \   000008   A3           INC     DPTR
   \   000009   EB           MOV     A,R3
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   25..         ADD     A,?V0 + 0
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   35..         ADDC    A,?V0 + 1
   \   000008   12....       LCALL   ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   25..         ADD     A,?V0 + 4
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   35..         ADDC    A,?V0 + 5
   \   000002                REQUIRE ??Subroutine46_0
   \   000002                ; // Fall through to label ??Subroutine46_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000003   78..         MOV     R0,#?V0 + 4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000003                REQUIRE ??Subroutine47_0
   \   000003                ; // Fall through to label ??Subroutine47_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F5..         MOV     ?V0 + 0,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F5..         MOV     ?V0 + 1,A
   \   00000D   7402         MOV     A,#0x2
   \   00000F   78..         MOV     R0,#?V0 + 0
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   00000C   22           RET
    349          
    350          /*********************************************************************
    351           * @fn      calibrationA
    352           *
    353           * @brief   calibration of A from anchors
    354           *
    355           * @param   rssi rssi array
    356           *
    357           * @return  none
    358           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    359          float calibrationA(int localID, int index, float rssivalue_f[4], float nValue[4], 
   \                     calibrationA:
    360                             float AnchorX[4], float AnchorY[4], float AnchorZ[4], float AValue[4])
    361          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   E0           MOVX    A,@DPTR
   \   000014   6E           XRL     A,R6
   \   000015   7003         JNZ     ??calibrationA_0
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   6F           XRL     A,R7
   \                     ??calibrationA_0:
   \   00001A   7003         JNZ     $+5
   \   00001C   02....       LJMP    ??calibrationA_1 & 0xFFFF
   \   00001F   7426         MOV     A,#0x26
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   000027   12....       LCALL   ?S_SHL
   \   00002A   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   00002D   12....       LCALL   ?L_MOV_X
   \   000030   8E..         MOV     ?V0 + 4,R6
   \   000032   8F..         MOV     ?V0 + 5,R7
   \   000034   7402         MOV     A,#0x2
   \   000036   78..         MOV     R0,#?V0 + 4
   \   000038   12....       LCALL   ?S_SHL
   \   00003B   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   00003E   12....       LCALL   ?L_MOV_X
   \   000041   78..         MOV     R0,#?V0 + 0
   \   000043   79..         MOV     R1,#?V0 + 4
   \   000045   12....       LCALL   ?FLT_SUB
   \   000048   7424         MOV     A,#0x24
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000050   12....       LCALL   ?S_SHL
   \   000053   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000056   12....       LCALL   ?L_MOV_X
   \   000059   8E..         MOV     ?V0 + 8,R6
   \   00005B   8F..         MOV     ?V0 + 9,R7
   \   00005D   7402         MOV     A,#0x2
   \   00005F   78..         MOV     R0,#?V0 + 8
   \   000061   12....       LCALL   ?S_SHL
   \   000064   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000067   12....       LCALL   ?L_MOV_X
   \   00006A   78..         MOV     R0,#?V0 + 4
   \   00006C   79..         MOV     R1,#?V0 + 8
   \   00006E   12....       LCALL   ?FLT_SUB
   \   000071   7402         MOV     A,#0x2
   \   000073   12....       LCALL   ?XSTACK_DISP0_8
   \   000076   78..         MOV     R0,#?V0 + 4
   \   000078   12....       LCALL   ?L_MOV_TO_X
   \   00007B   7422         MOV     A,#0x22
   \   00007D   12....       LCALL   ?XSTACK_DISP0_8
   \   000080   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000083   12....       LCALL   ?S_SHL
   \   000086   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000089   12....       LCALL   ?L_MOV_X
   \   00008C   8E..         MOV     ?V0 + 8,R6
   \   00008E   8F..         MOV     ?V0 + 9,R7
   \   000090   7402         MOV     A,#0x2
   \   000092   78..         MOV     R0,#?V0 + 8
   \   000094   12....       LCALL   ?S_SHL
   \   000097   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   00009A   12....       LCALL   ?L_MOV_X
   \   00009D   78..         MOV     R0,#?V0 + 4
   \   00009F   79..         MOV     R1,#?V0 + 8
   \   0000A1   12....       LCALL   ?FLT_SUB
   \   0000A4                ; Setup parameters for call to function pow
   \   0000A4   90....       MOV     DPTR,#__Constant_3f000000
   \   0000A7   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000AA   85....       MOV     ?V0 + 12,?V0 + 4
   \   0000AD   85....       MOV     ?V0 + 13,?V0 + 5
   \   0000B0   85....       MOV     ?V0 + 14,?V0 + 6
   \   0000B3   85....       MOV     ?V0 + 15,?V0 + 7
   \   0000B6   78..         MOV     R0,#?V0 + 12
   \   0000B8   79..         MOV     R1,#?V0 + 4
   \   0000BA   12....       LCALL   ?FLT_MUL
   \   0000BD   7406         MOV     A,#0x6
   \   0000BF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C2   78..         MOV     R0,#?V0 + 8
   \   0000C4   12....       LCALL   ?L_MOV_X
   \   0000C7   7406         MOV     A,#0x6
   \   0000C9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CC   78..         MOV     R0,#?V0 + 4
   \   0000CE   12....       LCALL   ?L_MOV_X
   \   0000D1   78..         MOV     R0,#?V0 + 8
   \   0000D3   79..         MOV     R1,#?V0 + 4
   \   0000D5   12....       LCALL   ?FLT_MUL
   \   0000D8   78..         MOV     R0,#?V0 + 12
   \   0000DA   79..         MOV     R1,#?V0 + 8
   \   0000DC   12....       LCALL   ?FLT_ADD
   \   0000DF   85....       MOV     ?V0 + 4,?V0 + 0
   \   0000E2   85....       MOV     ?V0 + 5,?V0 + 1
   \   0000E5   85....       MOV     ?V0 + 6,?V0 + 2
   \   0000E8   85....       MOV     ?V0 + 7,?V0 + 3
   \   0000EB   78..         MOV     R0,#?V0 + 4
   \   0000ED   79..         MOV     R1,#?V0 + 0
   \   0000EF   12....       LCALL   ?FLT_MUL
   \   0000F2   78..         MOV     R0,#?V0 + 12
   \   0000F4   79..         MOV     R1,#?V0 + 4
   \   0000F6   12....       LCALL   ?FLT_ADD
   \   0000F9   AA..         MOV     R2,?V0 + 12
   \   0000FB   AB..         MOV     R3,?V0 + 13
   \   0000FD   AC..         MOV     R4,?V0 + 14
   \   0000FF   AD..         MOV     R5,?V0 + 15
    362            float Aresult;
    363            float offset=2.0f;
    364            if(localID!=index)
    365            {
    366                
    367                float d=0.0f;
    368                d=(AnchorX[localID-1]-AnchorX[index-1])*(AnchorX[localID-1]-AnchorX[index-1])+
    369                  (AnchorY[localID-1]-AnchorY[index-1])*(AnchorY[localID-1]-AnchorY[index-1])+
    370                    (AnchorZ[localID-1]-AnchorZ[index-1])*(AnchorZ[localID-1]-AnchorZ[index-1]);
    371               
    372               
    373                d=pow(d,0.5);   // distance between two anchors 
   \   000101   12....       LCALL   ??pow?relay
   \   000104   7404         MOV     A,#0x4
   \   000106   12....       LCALL   ?DEALLOC_XSTACK8
   \   000109   8A..         MOV     ?V0 + 0,R2
   \   00010B   8B..         MOV     ?V0 + 1,R3
   \   00010D   8C..         MOV     ?V0 + 2,R4
   \   00010F   8D..         MOV     ?V0 + 3,R5
    374               
    375                if(d!=1)
   \   000111   90....       MOV     DPTR,#__Constant_3f800000
   \   000114   78..         MOV     R0,#?V0 + 4
   \   000116   12....       LCALL   ?L_MOV_X
   \   000119   78..         MOV     R0,#?V0 + 0
   \   00011B   79..         MOV     R1,#?V0 + 4
   \   00011D   12....       LCALL   ?FLT_EQ
   \   000120   606B         JZ      ??calibrationA_1
    376                  Aresult=rssivalue_f[index-1]-10*nValue[index-1]*log10(d)+offset;
   \   000122   8E..         MOV     ?V0 + 4,R6
   \   000124   8F..         MOV     ?V0 + 5,R7
   \   000126   7402         MOV     A,#0x2
   \   000128   78..         MOV     R0,#?V0 + 4
   \   00012A   12....       LCALL   ?S_SHL
   \   00012D   741E         MOV     A,#0x1e
   \   00012F   12....       LCALL   ?XSTACK_DISP0_8
   \   000132   12....       LCALL   ?Subroutine8 & 0xFFFF
    377                else
    378                  Aresult=AValue[localID-1];
    379            }
   \                     ??CrossCallReturnLabel_16:
   \   000135   12....       LCALL   ?L_MOV_X
   \   000138   8E..         MOV     ?V0 + 8,R6
   \   00013A   8F..         MOV     ?V0 + 9,R7
   \   00013C   7402         MOV     A,#0x2
   \   00013E   78..         MOV     R0,#?V0 + 8
   \   000140   12....       LCALL   ?S_SHL
   \   000143   7420         MOV     A,#0x20
   \   000145   12....       LCALL   ?XSTACK_DISP0_8
   \   000148   E0           MOVX    A,@DPTR
   \   000149   25..         ADD     A,?V0 + 8
   \   00014B   F8           MOV     R0,A
   \   00014C   A3           INC     DPTR
   \   00014D   E0           MOVX    A,@DPTR
   \   00014E   12....       LCALL   ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000151   12....       LCALL   ?L_MOV_X
   \   000154   90....       MOV     DPTR,#__Constant_41200000
   \   000157   78..         MOV     R0,#?V0 + 12
   \   000159   12....       LCALL   ?L_MOV_X
   \   00015C   78..         MOV     R0,#?V0 + 8
   \   00015E   79..         MOV     R1,#?V0 + 12
   \   000160   12....       LCALL   ?FLT_MUL
   \   000163                ; Setup parameters for call to function log10
   \   000163   12....       LCALL   ??log10?relay
   \   000166   8A..         MOV     ?V0 + 0,R2
   \   000168   8B..         MOV     ?V0 + 1,R3
   \   00016A   8C..         MOV     ?V0 + 2,R4
   \   00016C   8D..         MOV     ?V0 + 3,R5
   \   00016E   78..         MOV     R0,#?V0 + 8
   \   000170   79..         MOV     R1,#?V0 + 0
   \   000172   12....       LCALL   ?FLT_MUL
   \   000175   78..         MOV     R0,#?V0 + 4
   \   000177   79..         MOV     R1,#?V0 + 8
   \   000179   12....       LCALL   ?FLT_SUB
   \   00017C   90....       MOV     DPTR,#__Constant_40000000
   \   00017F   78..         MOV     R0,#?V0 + 0
   \   000181   12....       LCALL   ?L_MOV_X
   \   000184   78..         MOV     R0,#?V0 + 4
   \   000186   79..         MOV     R1,#?V0 + 0
   \   000188   12....       LCALL   ?FLT_ADD
   \   00018B   8011         SJMP    ??calibrationA_2
    380            else
    381            {
    382              Aresult=AValue[localID-1];
   \                     ??calibrationA_1:
   \   00018D   12....       LCALL   ??Subroutine47_0 & 0xFFFF
    383            }
   \                     ??CrossCallReturnLabel_131:
   \   000190   12....       LCALL   ?S_SHL
   \   000193   7428         MOV     A,#0x28
   \   000195   12....       LCALL   ?XSTACK_DISP0_8
   \   000198   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00019B   12....       LCALL   ?L_MOV_X
    384            return Aresult;
   \                     ??calibrationA_2:
   \   00019E   AA..         MOV     R2,?V0 + 4
   \   0001A0   AB..         MOV     R3,?V0 + 5
   \   0001A2   AC..         MOV     R4,?V0 + 6
   \   0001A4   AD..         MOV     R5,?V0 + 7
   \   0001A6   7406         MOV     A,#0x6
   \   0001A8   02....       LJMP    ?Subroutine0 & 0xFFFF
    385          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??printRSSIandLQI?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    printRSSIandLQI

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MinMax_localization?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MinMax_localization

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_WCL_localization?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_WCL_localization

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??moving_average?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    moving_average

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??moving_average_f?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    moving_average_f

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??gaussianfilter?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gaussianfilter

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??averagefilter?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    averagefilter

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??calibrationN?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    calibrationN

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??calibrationA?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    calibrationA

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "RSSI:">`:
   \   000000   52535349     DB "RSSI:"
   \            3A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "LQI:">`:
   \   000000   4C51493A     DB "LQI:"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\n">`:
   \   000000   0A00         DB "\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {(0.0F)}>`:
   \   000000   00000000     DD 0H
   \   000004   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00000C   00000000     DB 0, 0, 0, 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {(0.0F), (0.0F), (0.0F), (0.0F)}>`:
   \   000000   00000000     DD 0H
   \   000004   00000000     DD 0H
   \   000008   00000000     DD 0H
   \   00000C   00000000     DD 0H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {(48.0F), (48.0F), (55.0F), (56.0F)`:
   \   000000   00004042     DD 42400000H
   \   000004   00004042     DD 42400000H
   \   000008   00005C42     DD 425C0000H
   \   00000C   00006042     DD 42600000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3f800000:
   \   000000   0000803F     DD 3F800000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_41200000:
   \   000000   00002041     DD 41200000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3f000000:
   \   000000   0000003F     DD 3F000000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_c031eb85:
   \   000000   85EB31C0     DD 0C031EB85H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_40800000:
   \   000000   00008040     DD 40800000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_40000000:
   \   000000   00000040     DD 40000000H
    386          
    387          
    388          /*********************************************************************
    389          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       4      0     82  SampleApp_MinMax_localization
                          0 0 66 -> pow
       4      0     84  SampleApp_WCL_localization
                          0 0 72 -> pow
       0      0     16  averagefilter
       0      0     46  calibrationA
                          0 0 30 -> log10
                          0 0 34 -> pow
       2      0     62  calibrationN
                          0 0 46 -> log10
                          0 0 50 -> pow
       0      0     36  gaussianfilter
       1      0     24  moving_average
       0      0     28  moving_average_f
       1      0     24  printRSSIandLQI
                          0 0 24 -> HalUARTWrite


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       5  ?<Constant "LQI:">
       6  ?<Constant "RSSI:">
       2  ?<Constant "\n">
      16  ?<Constant {(0.0F), (0.0F), (0.0F), (0.0F)}>
      16  ?<Constant {(0.0F)}>
      16  ?<Constant {(48.0F), (48.0F), (55.0F), (56.0F)
       6  ??SampleApp_MinMax_localization?relay
       6  ??SampleApp_WCL_localization?relay
       6  ??Subroutine44_0
       8  ??Subroutine45_0
       6  ??Subroutine46_0
      18  ??Subroutine47_0
       6  ??averagefilter?relay
       6  ??calibrationA?relay
       6  ??calibrationN?relay
       6  ??gaussianfilter?relay
       6  ??moving_average?relay
       6  ??moving_average_f?relay
       6  ??printRSSIandLQI?relay
       8  ?Subroutine0
       5  ?Subroutine1
      17  ?Subroutine10
      22  ?Subroutine11
       6  ?Subroutine12
       9  ?Subroutine13
      15  ?Subroutine14
       6  ?Subroutine15
      19  ?Subroutine16
       4  ?Subroutine17
      10  ?Subroutine18
      15  ?Subroutine19
      16  ?Subroutine2
      17  ?Subroutine20
      15  ?Subroutine21
       6  ?Subroutine22
      12  ?Subroutine23
      13  ?Subroutine24
      11  ?Subroutine25
       2  ?Subroutine26
      16  ?Subroutine27
       9  ?Subroutine28
       5  ?Subroutine29
      18  ?Subroutine3
      15  ?Subroutine30
       9  ?Subroutine31
      13  ?Subroutine32
      11  ?Subroutine33
      12  ?Subroutine34
      15  ?Subroutine35
      12  ?Subroutine36
       6  ?Subroutine37
      13  ?Subroutine38
      12  ?Subroutine39
      13  ?Subroutine4
       2  ?Subroutine40
       9  ?Subroutine41
       4  ?Subroutine42
      12  ?Subroutine43
      13  ?Subroutine5
       3  ?Subroutine6
      22  ?Subroutine7
      10  ?Subroutine8
      12  ?Subroutine9
     963  SampleApp_MinMax_localization
     797  SampleApp_WCL_localization
       4  __Constant_3f000000
       4  __Constant_3f800000
       4  __Constant_40000000
       4  __Constant_40800000
       4  __Constant_41200000
       4  __Constant_c031eb85
      99  averagefilter
     427  calibrationA
     448  calibrationN
     455  gaussianfilter
     210  moving_average
     233  moving_average_f
     402  printRSSIandLQI

 
 4 566 bytes in segment BANKED_CODE
    54 bytes in segment BANK_RELAYS
    85 bytes in segment XDATA_ROM_C
 
 4 620 bytes of CODE  memory
    61 bytes of CONST memory (+ 24 bytes shared)

Errors: none
Warnings: 1
